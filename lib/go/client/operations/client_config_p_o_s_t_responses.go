// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/toggler-io/toggler/lib/go/models"
)

// ClientConfigPOSTReader is a Reader for the ClientConfigPOST structure.
type ClientConfigPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClientConfigPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewClientConfigPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewClientConfigPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewClientConfigPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewClientConfigPOSTOK creates a ClientConfigPOSTOK with default headers values
func NewClientConfigPOSTOK() *ClientConfigPOSTOK {
	return &ClientConfigPOSTOK{}
}

/*ClientConfigPOSTOK handles this case with default header values.

ClientConfigResponse returns information about the requester's rollout feature enrollment statuses.
*/
type ClientConfigPOSTOK struct {
	Payload *models.ClientConfigResponseBody
}

func (o *ClientConfigPOSTOK) Error() string {
	return fmt.Sprintf("[POST /client/config.json][%d] clientConfigPOSTOK  %+v", 200, o.Payload)
}

func (o *ClientConfigPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientConfigResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClientConfigPOSTBadRequest creates a ClientConfigPOSTBadRequest with default headers values
func NewClientConfigPOSTBadRequest() *ClientConfigPOSTBadRequest {
	return &ClientConfigPOSTBadRequest{}
}

/*ClientConfigPOSTBadRequest handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type ClientConfigPOSTBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *ClientConfigPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /client/config.json][%d] clientConfigPOSTBadRequest  %+v", 400, o.Payload)
}

func (o *ClientConfigPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClientConfigPOSTInternalServerError creates a ClientConfigPOSTInternalServerError with default headers values
func NewClientConfigPOSTInternalServerError() *ClientConfigPOSTInternalServerError {
	return &ClientConfigPOSTInternalServerError{}
}

/*ClientConfigPOSTInternalServerError handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type ClientConfigPOSTInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *ClientConfigPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /client/config.json][%d] clientConfigPOSTInternalServerError  %+v", 500, o.Payload)
}

func (o *ClientConfigPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
