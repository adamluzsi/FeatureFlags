// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/toggler-io/toggler/lib/go/models"
)

// IsFeatureEnabledReader is a Reader for the IsFeatureEnabled structure.
type IsFeatureEnabledReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsFeatureEnabledReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIsFeatureEnabledOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewIsFeatureEnabledBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewIsFeatureEnabledInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIsFeatureEnabledOK creates a IsFeatureEnabledOK with default headers values
func NewIsFeatureEnabledOK() *IsFeatureEnabledOK {
	return &IsFeatureEnabledOK{}
}

/*IsFeatureEnabledOK handles this case with default header values.

EnrollmentResponse returns information about the requester's rollout feature enrollment status.
*/
type IsFeatureEnabledOK struct {
	Payload *models.EnrollmentResponseBody
}

func (o *IsFeatureEnabledOK) Error() string {
	return fmt.Sprintf("[POST /rollout/is-feature-enabled.json][%d] isFeatureEnabledOK  %+v", 200, o.Payload)
}

func (o *IsFeatureEnabledOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EnrollmentResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsFeatureEnabledBadRequest creates a IsFeatureEnabledBadRequest with default headers values
func NewIsFeatureEnabledBadRequest() *IsFeatureEnabledBadRequest {
	return &IsFeatureEnabledBadRequest{}
}

/*IsFeatureEnabledBadRequest handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type IsFeatureEnabledBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *IsFeatureEnabledBadRequest) Error() string {
	return fmt.Sprintf("[POST /rollout/is-feature-enabled.json][%d] isFeatureEnabledBadRequest  %+v", 400, o.Payload)
}

func (o *IsFeatureEnabledBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsFeatureEnabledInternalServerError creates a IsFeatureEnabledInternalServerError with default headers values
func NewIsFeatureEnabledInternalServerError() *IsFeatureEnabledInternalServerError {
	return &IsFeatureEnabledInternalServerError{}
}

/*IsFeatureEnabledInternalServerError handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type IsFeatureEnabledInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *IsFeatureEnabledInternalServerError) Error() string {
	return fmt.Sprintf("[POST /rollout/is-feature-enabled.json][%d] isFeatureEnabledInternalServerError  %+v", 500, o.Payload)
}

func (o *IsFeatureEnabledInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
