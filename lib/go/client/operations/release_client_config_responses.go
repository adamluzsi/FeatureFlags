// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/toggler-io/toggler/lib/go/models"
)

// ReleaseClientConfigReader is a Reader for the ReleaseClientConfig structure.
type ReleaseClientConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReleaseClientConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewReleaseClientConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewReleaseClientConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewReleaseClientConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewReleaseClientConfigOK creates a ReleaseClientConfigOK with default headers values
func NewReleaseClientConfigOK() *ReleaseClientConfigOK {
	return &ReleaseClientConfigOK{}
}

/*ReleaseClientConfigOK handles this case with default header values.

ClientConfigResponse returns information about the requester's rollout feature enrollment statuses.
*/
type ReleaseClientConfigOK struct {
	Payload *models.ClientConfigResponseBody
}

func (o *ReleaseClientConfigOK) Error() string {
	return fmt.Sprintf("[GET /client/config.json][%d] releaseClientConfigOK  %+v", 200, o.Payload)
}

func (o *ReleaseClientConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ClientConfigResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseClientConfigBadRequest creates a ReleaseClientConfigBadRequest with default headers values
func NewReleaseClientConfigBadRequest() *ReleaseClientConfigBadRequest {
	return &ReleaseClientConfigBadRequest{}
}

/*ReleaseClientConfigBadRequest handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type ReleaseClientConfigBadRequest struct {
	Payload *models.ErrorResponseBody
}

func (o *ReleaseClientConfigBadRequest) Error() string {
	return fmt.Sprintf("[GET /client/config.json][%d] releaseClientConfigBadRequest  %+v", 400, o.Payload)
}

func (o *ReleaseClientConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseClientConfigInternalServerError creates a ReleaseClientConfigInternalServerError with default headers values
func NewReleaseClientConfigInternalServerError() *ReleaseClientConfigInternalServerError {
	return &ReleaseClientConfigInternalServerError{}
}

/*ReleaseClientConfigInternalServerError handles this case with default header values.

ErrorResponse will contains a response about request that had some kind of problem.
The details will be included in the body.
*/
type ReleaseClientConfigInternalServerError struct {
	Payload *models.ErrorResponseBody
}

func (o *ReleaseClientConfigInternalServerError) Error() string {
	return fmt.Sprintf("[GET /client/config.json][%d] releaseClientConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *ReleaseClientConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponseBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
