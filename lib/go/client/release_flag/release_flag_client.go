// Code generated by go-swagger; DO NOT EDIT.

package release_flag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new release flag API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for release flag API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	IsFeatureGloballyEnabled(params *IsFeatureGloballyEnabledParams, authInfo runtime.ClientAuthInfoWriter) (*IsFeatureGloballyEnabledOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  IsFeatureGloballyEnabled checks rollout feature status for global use

  Reply back whether the feature rolled out globally or not.
This is especially useful for cases where you don't have pilot id.
Such case is batch processing, or dark launch flips.
By Default, this will be determined whether the flag exist,
Then  whether the release id done to everyone or not by percentage.
The endpoint can be called with HTTP GET method as well,
POST is used officially only to support most highly abstracted http clients.
*/
func (a *Client) IsFeatureGloballyEnabled(params *IsFeatureGloballyEnabledParams, authInfo runtime.ClientAuthInfoWriter) (*IsFeatureGloballyEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsFeatureGloballyEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "IsFeatureGloballyEnabled",
		Method:             "POST",
		PathPattern:        "/release/is-feature-globally-enabled.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &IsFeatureGloballyEnabledReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsFeatureGloballyEnabledOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for IsFeatureGloballyEnabled: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
