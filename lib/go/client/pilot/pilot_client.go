// Code generated by go-swagger; DO NOT EDIT.

package pilot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pilot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pilot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPilotConfig(params *GetPilotConfigParams) (*GetPilotConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPilotConfig returns all the flag states that was requested in the favor of a pilot

  This endpoint especially useful for Mobile & SPA apps.
The endpoint can be called with HTTP GET method as well,
POST is used officially only to support most highly abstracted http clients,
where using payload to upload cannot be completed with other http methods.
*/
func (a *Client) GetPilotConfig(params *GetPilotConfigParams) (*GetPilotConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPilotConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPilotConfig",
		Method:             "GET",
		PathPattern:        "/v/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPilotConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPilotConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPilotConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
