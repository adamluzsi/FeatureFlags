// Code generated by "esc -o ./specfs/fs.go -pkg specfs api.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/api.json": {
		name:    "api.json",
		local:   "api.json",
		size:    15285,
		modtime: 1586907480,
		compressed: `
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
V0e3/w0AAP//3QYdJbU7AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
