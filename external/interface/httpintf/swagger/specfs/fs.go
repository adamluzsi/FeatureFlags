// Code generated by "esc -o ./specfs/fs.go -pkg specfs api.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/api.json": {
		name:    "api.json",
		local:   "api.json",
		size:    13550,
		modtime: 1586864833,
		compressed: `
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
AAD//2v6SxnuNAAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
