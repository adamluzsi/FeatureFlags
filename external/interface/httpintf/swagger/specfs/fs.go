// Code generated by "esc -o ./specfs/fs.go -pkg specfs api.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/api.json": {
		name:    "api.json",
		local:   "api.json",
		size:    21976,
		modtime: 1586913344,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
