// Code generated by "esc -o ./specfs/fs.go -pkg specfs api.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/api.json": {
		name:    "api.json",
		local:   "api.json",
		size:    12906,
		modtime: 1586570219,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
