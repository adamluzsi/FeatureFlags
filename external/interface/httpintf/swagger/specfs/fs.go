// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    26557,
		modtime: 1622803823,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
