// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    30054,
		modtime: 1600957187,
		compressed: `
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
9wdwZnUAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
