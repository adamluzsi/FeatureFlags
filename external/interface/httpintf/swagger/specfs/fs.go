// Code generated by "esc -o ./specfs/fs.go -pkg specfs api.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/api.json": {
		name:    "api.json",
		local:   "api.json",
		size:    29994,
		modtime: 1593642100,
		compressed: `
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
9bac64PN/wMAAP//RZDaOSp1AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
