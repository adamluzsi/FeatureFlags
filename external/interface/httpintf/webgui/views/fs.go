// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/doc/show.html": {
		name:    "show.html",
		local:   "views/doc/show.html",
		size:    50,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/6quTklNy8xLVVDKTczMU6qt5eWySckss+PlUlCortYD8/UhAtXVqXkptbWAAAAA///U
3ymuMgAAAA==
`,
	},

	"/env/create.html": {
		name:    "create.html",
		local:   "views/env/create.html",
		size:    883,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/5RSTY+cMAy9jzT/wfI9Rd1z4NJ7/0IViAcsJQ4Kht3VaP57NXy0lC4r7SmG5+f3XuL7
3dONhQCjY8HH43qxnidoghuGEpskSqJYXS8AALZ7OSCmI+eBB9OQKGWsfmRySkAycZJIorboXjb6bnI/
ZjLtNviIBlOnNxNyC3PfuB7m+54wk24pR3CNcpISC5IJIZJ2yZfYp0HxH725+U9lXOBWyCN4p87UrK8u
exLz6rTpWNoS/9NbNJmCH0g/wGacpR8VxEUq8dfiBkHfeyqxY+9JECYXRlotVtfLyaDjfT0vPadg2pzG
Hk/kZ2ZwNQW4pVwiyfTt6QWrny6SLWboM+5in/2Ouob5+72kUXrTMxu28DxVXws2fJqpHlWTrNLDWEc+
PO/asKtNnzm6/L7tpS2W/1/0bIuTJ7fFc5H2S7ybsNXbeb+T+MfjdwAAAP//LQZJ5HMDAAA=
`,
	},

	"/env/index.html": {
		name:    "index.html",
		local:   "views/env/index.html",
		size:    833,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/4xSwY6bMBC9I/EPI0s9st7d48q4qro97KX/YPAkWMXjyEyoUot/rwikAZJG65P15s3z
+M1LyeLOEYLwxpEYhjxT1vVQt6brSlEHYiQWOs8AAFTzuqkUDRoLritqJMYo9A/qXQzkkbhTsnnVeTb3
mkvr4RixqI7MgWBxLw7ReRNPApqIu1JIpF7WEQ2jWLV6pGPROvolJuXxdHxqsRTexL2jogrMwb/BC3qh
v58llDTXUdhULa40J+R6LZoQ3Z9AbFpxEf/tLDdv8PL8/OViyKQ2erAAJjBukJmqfxqPSnLzn/LH+4Pi
t5pdoO4OQ8nVgyNjGmo5ZxXsadOXEkRDe4QnGHf/mS9YnRI8jd+AYVCS7QPWx/tjzi06R+Uaga/Olv+k
xJ0MCY3W8bTfG6XbpzdOzSYg2ZUBSi7dUvIcirOdSlrX6zxLCckOw98AAAD//8UZlrRBAwAA
`,
	},

	"/env/show.html": {
		name:    "show.html",
		local:   "views/env/show.html",
		size:    1065,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/6xTTYvbMBA9ZyH/YZjLtguK6R6L7VLYHHrpreeiWJNY1BoZeWQajP97iSM3H3U/FnrS
eGbee/J7aBgM7S0ToNOWcRzXD7mxPVSN7roCK89CLFiuH1Z5/XzXVjVpA7ZTFbFQwHLLvQ2eHbF0oGBr
rLyHYYDNlvvNZ+0IxjHP6ueJ7kqmjYHUYVK56Tdq57+rJhxg2ojpUO/Oq6thyJ4g3/vgQFdiPReYEfcI
jqT2psDWd4I3KtPyz0rpxh6YDJZP2enfVxdSS43pSK4GaWK5jQKsHRX49SyEIMeWCqytMcQIvW4inQQF
/4wn7jen6jcEd9b9A5k1f6H69LJMtIsinhO2iztn74xLC1e1aoN1Ohyx/NIaLZRn5/6v5NmCm/PEB3fp
/p8szwKXCNNdXpGcoYaEcBH5Gptn/KK7nqvGVt8KDCQxMFSe9za4N48fA8HRR+hioA+PbxdzSBHcXXT1
Mn3PsnMgyZDs1pFk/vToMmP7cv1wepepnM9hIDbj+CMAAP//BSGAzSkEAAA=
`,
	},

	"/flag/create.html": {
		name:    "create.html",
		local:   "views/flag/create.html",
		size:    749,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/4xSzc6cMAy8r7TvYPmeon7nwKX3vkJliIFIIUHB2R8h3r1igS2wUvWdPLLHnpHtcTRc
W8+AHVmP03S9aGNvUDkahhyr4IW9YHG9AOj265RXLZMBO6iKvXDE4ldkEobaUaOz9mtp283rU2TVLOOO
FafK8FAuNvDipDWonxsZQNchdkCV2OBzzGYRhI6lDSbHPgyCB5kX+40UOdt4NgiGhFRp5U7RsFd3kqq1
vslxJzWLWXZmYNnlALT1fRLw1HGOfxZtBHn2nGNrjWGPcCOXeDVUXC+H9vMq5j3G4FQTQ+rxIAWgHZXs
oA4xx5pJUmQsflPHOntVzvTFmzX/2KvReVM/ZrhZFX7IUU1nxt6K73gdPmyWSST4dfSQys6eLrESdlj1
0XYUn9vH6GzJ/9eTzj5uorP5tts7vfkb2uI4sjfT9DcAAP//RiOlwO0CAAA=
`,
	},

	"/flag/index.html": {
		name:    "index.html",
		local:   "views/flag/index.html",
		size:    633,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/2yRzW7rIBCF17bkd0BId+mQZBlhrqpGlbLpO2AzsVENRHiSKkV+9wrj5sft7uiDMzNn
JgQFR22BUCO1peNY5FzpC2l6OQwVbZxFsEhFkWe82y5w2YFURA9lAxbBU/HWy3bgrNuKIo8O+WM4nT2U
9RnRWfKgy5PXRvorJZ2HY0XZsZctazxIBPrkNWDPZa/tBy3yLBvw2kNFjfSttmXtEJ3ZkQ0YKl4nM2dy
HgFl3cNTqUTusuyc11/OouwpmSt/aoXdjmzW639T9oxjzDrJjKNPIlLxLg1wht0DOuwX4KVB7exwp5zN
NSJKhVOX2qlr+hIC8dK2QFYkXmXRV4kQyCr2JuPIGarFy2H/mycVr/Kw7f9aVTcD/eNeVIDSmBaapdHV
IkScFaya5+TsloKzacNTOs6UvogiDwGsGsfvAAAA//8Pbw6leQIAAA==
`,
	},

	"/flag/show.html": {
		name:    "show.html",
		local:   "views/flag/show.html",
		size:    1065,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/6xTTYvbMBA9Z2H/wzCXbRcU0z0WO6WwLfTSW89FsSa2qD6MPAoNwv+92JGbxHU/FnrS
+GnmvfF7KCVFB+0I0ErtcBju70qlj1Ab2fcV1t4xOcbd/d2mbJ8WsGhJKtC9qMkxBdx9NLLpQcAHpfkt
pATbEdl+lpZgGMqifZqIrgS6GEg0E/8NbsTefxcmNDB1xHyIN+fWTUrFI5QHHyzImrV3FRYHIxsES9x6
VWHne8Ybman7ZyWk0Y0jhbvHYvztzYVVk1E98dVFvtGuiwxOWqrw61kIgU8dVdhqpcghHKWJNAoy/nl+
3HY7lr9hWLr3L3Ra/Y3s0/M61T4ye5eH+7i3emFebriqRRe0leGEuy+dkkxlccZ/JS9WHJ1vfLAX9D8F
ela45JiXeUF8igwx4erky5yeGVYN9q42uv5WYSCOwUHt3UEH++rhfSA4+Qh9DPTu4fVqFDmFxaqb5+l7
lp0zyZYUt55k/6fHVyh9nF5nLuYzJXJqGH4EAAD//8rGVoUpBAAA
`,
	},

	"/layout.html": {
		name:    "layout.html",
		local:   "views/layout.html",
		size:    2162,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/6SWUYvjNhDHnxPId5jVvfQgijZ71+tytQOlt0cLPSjb9qmUolgTZ25lyUhy0hDy3Ytk
O/Fubjly+xAsazS//3g0I2W/V7gig8BqWSI7HCbj7ErZIuxqhHWo9GIyzuITtDRlztCwxWQc51CqxWQM
kAUKGhd/2rLU6DLRviZLhUFCsZbOY8hZE1b8lg0sRlaYM4W+cFQHsoZBYU1AE3LW4d7Dz9YEZzXsbOPg
I8rQOIR71Cg9ethSWENIa/3VOXtDuK2tCwPwllRY5wo3VCBPL1MgQ4Gk5r6QGvP57LojaTIP4FDnzIed
Rr9GDAzWDlc5E9J7DF7UjcPCt09ekZkV3l/gHl1X1gQut+hthRe69+qlI+W5Q19b42nzrZFoubNN8MKT
Ql6haQaM5Am+sDWqnLWTALNlE4I1XKHGgLBvZwEKq617D9s1Bfyxn1zK4qF0tjGKd3ZXLr+7ub6Zwrvr
+HvdLT08hqORS53go9HoCXk0Gp2wHfB2CvPbt1N49/3rtOIQK3Y0OsZK/jLezZspzOc/TOHm+ggEyERK
SZudK86zq7/RKFr9w3lsGtF1yGScLa3atcsUbYBUztpEMyi09D5nqXjKPqcRBp/QNF1lQwImi+w27VXc
HJZQcfQbmYcjLE7wuOM9ryP+Iqtl40p0QIU1J2jc21qaRSbSo1MSsh/1MbeSnUiskKV0kCJv+LwfVIrP
+duBcvQefmWiHM3pk56aecwcmbKv0FfsdLrIoWujz301+TDkp+o/X0YBK7Y45lOg2QgyCv9jX0LGXN6Z
DTlrKjTBxzgyoelynZWW5VeEPmpZvkDBWa3PamuAv2/tL1CoSdsgVmTUsyK/xyUXSPQ7vvhgC/9tUSlb
eHF/99OHT3ez6vnI7lGqCi/9+OGyQRsKv5VliU40JJ5ThCBdGe+/f5daxgj+aH3++vVxNceeexRQJhp9
6iOhaHPszcH42J2SzDGE7rb7Une+GXbnfh+wqrUMCB1gdjg8FRmM2psavCtO98ZnLxqaffYsHiDJnk6/
7sxLB2H7N2K/R6MOh/8DAAD//xWNz3xyCAAA
`,
	},

	"/login.html": {
		name:    "login.html",
		local:   "views/login.html",
		size:    419,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/4SQUW6sMAxF/5HYg+V/YAMJm3hvAxniYawmdpSEqUaIvVe0TDtIlfqXxOf6RHddPV1Z
CDA6Fty2tjGe7zAFV4rFSaWSVBzbBsBcNcfnJC2Zuv0BwU2VVSwOQWcWhEj1pt5i0nIk9yxT8IXqcQd4
1Xwu211ZQzdnXRJ+cwCGJS0VxEWyWPWNBKE+EllMrpR3zR4hBTfRTYOnbPH/zvR9/7PEDJ7vf6rLyXpZ
alU5TGW5RK54Sh3Ay7lLmaPLDxz/8SzAYoavwa8fMcOpFDPsdY5t82TWlcRv20cAAAD//+YTXLejAQAA
`,
	},

	"/pilot/edit.html": {
		name:    "edit.html",
		local:   "views/pilot/edit.html",
		size:    1545,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/6yUwW7bMAyG7wHyDoSwUwHHWI9DnFPTYZdi2HYvGIuxicmSJ9FuC8PvPkhOusRLh7aY
TwlN/vxIkxyG/Ao+b39A3rJxkpNmgat8HJeLYdC0Z0ugGmSrommtuYfSYAiFKp0VsqI2ywUAwLq+nr3J
akINHLKSrJBXm68xQ4AMtprlEwwDrJJp+yjkLZovNzCO67y+3iwXk+gwgEdbEaxuCaXzdGuwChBRUs69
8w1gKexsoQ4V7A1WeSDJvDPGdaKgIamdLlTrgqgjZNt5ylL8868MDVeWtJrU46NRMNuxPKDXZLMHlLJm
WxXq47HuiYPJ6EByYkt2tm0nIE8tFapmrckqsNhQoe4nKAU9mo4ObK8PT6Wu6FHu+Y/GMMCHCx19s2zs
4Ex39Y0MYUj9f58o2f4v1htqjXva2v6y5MmwpW8U58o7k1Xede3cO0UY3JGBvfOFIhu/f5MmdFbAHTaU
Ji25X9IJZKgUYH2mc1YPh/sWvXDJLQrb6hJP0nJtHM9j3Q81CxkOQlrF8eY90K/DHnwXFIJzl3GcWEgP
A1k9ji+kic82oZJ+ASSfSF7HuTNY/vw355nLWzhvnS8Jbigubo/yf4A7O12rF3FPHN4Ce+cEQksl7/kd
oOt8ynTp1a4TcfawMqHbNTy7TpOD2gTsaZ1P/+Y7kmvuTy9RPjtF6zxets3zOSWr0/lcLo6hhxb8DgAA
//9m8CFyCQYAAA==
`,
	},

	"/pilot/find.html": {
		name:    "find.html",
		local:   "views/pilot/find.html",
		size:    817,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/6ySwYrcMAyGz1mYdxA+LmRM9+zktEtZKKWH3osnViYGRw62kp3F5N2LnZlpmEPpoeQi
K9KnXz9KST7D17efICfrPMvekoFnua6Hp5QM9pYQxKgtiZxSxi7QOR1jIzpPjMSiPTxVanh5SNcDagM2
1h0SYxDtj4yPSg4v7eEpt/Q+jKA7tp4asZsuYEQevGnE5COLG3eaA9al5x7V2tkzoRFgNOv6ZPlDB4NU
f2juBkvnRnwp8irVW3QmIpdXtV+j0LLo4F19Dn6etpaqUk6f0EHvQyOQgnduLPu+0WKDp/xQstTcGiI6
7Bj4c8JGMF5YAOkRG1G2OyItv6y54auUIGg6Ixx3xAjZ5/Jf+SmbA4t2MzYiJTi+v8K6ijaH3/WIsK5K
blU7KJK5Q5TcNF33lsYu/8WCC2Mg7eD99cECS9P8Fwcu/MeBf1AT70JOM7OnKzjOp9E+nMa1YBfXU7Cj
Dp+i/ea1UXLLPs5Wcn8bSubDKhe6fbfClJBMdvV3AAAA///LcXpkMQMAAA==
`,
	},

	"/rollout/edit.html": {
		name:    "edit.html",
		local:   "views/rollout/edit.html",
		size:    2161,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/+xUy27bQAw8O0D+geAxgLJJjoWkQxs36KUokt4DyktLC+xD2F05dQX9e6FHEtnNq24u
BXoyTQ+H5HLGbStO4Gr5HUSttIuCpYpwIrru+KhtJa+VZUBDymKfSqXawEpTCBmunI1sI+bHR4u0uthL
JxWTBBWSFdvIfkAtrp3WrokBElj2fdoWTi+51m67tBvlnTVs41cyDF0Ha+cHwDVrpsCfNZXTT31DUV3k
x0d9tHbeAK2icjZD4ccWoqklRUYwHCsnM6xdiHg/Y914Toa6hyghrUrLEkFSpKRQ8Y68ZJvcUVxVypYZ
no9LpGvFWgaOw7dFqmzdRIjbmjOslJRsESwZzvB2bI6wId3wNMOrVWtN5a16rNp7gy+X0HWvs7Dd7JP8
9tI7VLPLDo/S39E7nZTeNfUEWqSaCtb9aTKs2fe3pZIx//YQp2KA3OPnA9rGFOwRlNwpngaeZ4yyGZ4h
GPqR4fnZ2c4aH7eP3U4fw9kqQqrNoVsFZon5pxEGAww8WemM+sn+jdsNJNNeY/zc/DfM8o8mDw9DF02M
zk7dQ1MYtSfwCTCLk9orQ36L+Q1tOBVjdr93KuYKT0Vvj8lr1UV+pV1B+kD/veAtCHGrOUNDvlT2A5yz
mfx2iMHexV/vZ68nmf5CKc/yveyribt31EjzVg1N8mFLhWbMl8PnXD87KvmviH9NEQfqQaowCuJyDJ5U
xP0fS9uylV33KwAA///J6kaCcQgAAA==
`,
	},

	"/rollout/index.html": {
		name:    "index.html",
		local:   "views/rollout/index.html",
		size:    647,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/2xSTavbMBA8O5D/sIi+Hh44en3HIrsUkpReSgn9A4q1sQWKFKS1Syr034ts5wPzbsNo
dmeYVYz8FX7s/gC/aOOIo9IErzyl9SpGhSdtEdhZassyJZQeoDEyhIo1zhJaYvV6VYjufUGXHUoFOpQN
WkLP6oMzxvUUBO/exxGSR4O3qUvvsZyYByw75/U/Z0kaBoGuBiv2VyvqvsKXt7eX0bkQlJ1GWAjyE8hs
vTeyFZy6J+qABmVA+I0+55ItLgTfG9LOhgcr+LwzUzcjQUenrpMgRvDStgibPUrqPWbbALmtRSJVxwib
OUJW/ZJnhJQEJ/Wx6BETUnpZ6CZUCAmdx1PFuJ8aHk/4De1QalXFCJ82W7wYd93ZQXtnz2jp5xZS+nwy
sp01z6nGRzZvL57vc+yJnGV1NhBc3rLcY927yqWgVXMJgt/rEnw8bL1eCa70UOdPhlal9D8AAP//da/z
ZIcCAAA=
`,
	},

	"/rollout/landing.html": {
		name:    "landing.html",
		local:   "views/rollout/landing.html",
		size:    671,
		modtime: 1616304061,
		compressed: `
H4sIAAAAAAAC/3xRwYrcMAw9Z2D+Qfi4kDXds5NTl1IoPZT+gCdWJgJHDraS3cXk34uTmSHMobdn+b0n
PSln/QI/3v+CnsgH0T2xgxe9rudTzg57YgQ1WmJVSsbRAp23KTWqCyzIotrzqTLD21O5HtA6oFR3yIJx
Y1V/gvdhllQUenhrz6eC+hBHsJ1Q4EbpuHM0scNPBSPKEFyjppBE3XtMc8R6kz1QbT1dGZ0CZ8XWF5IP
Gx1y/WGlG4ivjfq2D2F6Qu8SyvaqjpE2txIgBl9fY5inXVJVxtsLeuhDbBRymXHcsr/zQjFweRi9ce6C
hB47AfmasFGCn6KA7YhFvtTk7sZVzhAtXxFeD14Jyra3fxOmshlYrJ+xUTnD68/vsK6qLfC3HRHW1eid
dTBFdg8To/dpbom1o+X/4dMj92UWCXyLkebLSE9nuBEOuJ4ijTZ+qfZXsM7ovfrc2+jjHYwuR2zPpzsh
Z2S3rv8CAAD//9UB+A6fAgAA
`,
	},

	"/doc": {
		name:  "doc",
		local: `views/doc`,
		isDir: true,
	},

	"/env": {
		name:  "env",
		local: `views/env`,
		isDir: true,
	},

	"/flag": {
		name:  "flag",
		local: `views/flag`,
		isDir: true,
	},

	"/pilot": {
		name:  "pilot",
		local: `views/pilot`,
		isDir: true,
	},

	"/rollout": {
		name:  "rollout",
		local: `views/rollout`,
		isDir: true,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"views/doc": {
		_escData["/doc/show.html"],
	},

	"views/env": {
		_escData["/env/create.html"],
		_escData["/env/index.html"],
		_escData["/env/show.html"],
	},

	"views/flag": {
		_escData["/flag/create.html"],
		_escData["/flag/index.html"],
		_escData["/flag/show.html"],
	},

	"views/pilot": {
		_escData["/pilot/edit.html"],
		_escData["/pilot/find.html"],
	},

	"views/rollout": {
		_escData["/rollout/edit.html"],
		_escData["/rollout/index.html"],
		_escData["/rollout/landing.html"],
	},

	"./views": {
		_escData["/doc"],
		_escData["/env"],
		_escData["/flag"],
		_escData["/layout.html"],
		_escData["/login.html"],
		_escData["/pilot"],
		_escData["/rollout"],
	},
}
