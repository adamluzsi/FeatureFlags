// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../../domains/toggler/Storage.go

// Package contracts is a generated GoMock package.
package contracts

import (
	context "context"
	reflect "reflect"

	iterators "github.com/adamluzsi/frameless/iterators"
	resources "github.com/adamluzsi/frameless/resources"
	gomock "github.com/golang/mock/gomock"
	deployment "github.com/toggler-io/toggler/domains/deployment"
	release "github.com/toggler-io/toggler/domains/release"
	security "github.com/toggler-io/toggler/domains/security"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStorage) Create(ctx context.Context, ptr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStorageMockRecorder) Create(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStorage)(nil).Create), ctx, ptr)
}

// FindByID mocks base method.
func (m *MockStorage) FindByID(ctx context.Context, ptr, id interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ptr, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockStorageMockRecorder) FindByID(ctx, ptr, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockStorage)(nil).FindByID), ctx, ptr, id)
}

// FindAll mocks base method.
func (m *MockStorage) FindAll(arg0 context.Context, arg1 resources.T) iterators.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].(iterators.Interface)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockStorageMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStorage)(nil).FindAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockStorage) Update(ctx context.Context, ptr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageMockRecorder) Update(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, ptr)
}

// DeleteByID mocks base method.
func (m *MockStorage) DeleteByID(ctx context.Context, T resources.T, id interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, T, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockStorageMockRecorder) DeleteByID(ctx, T, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockStorage)(nil).DeleteByID), ctx, T, id)
}

// DeleteAll mocks base method.
func (m *MockStorage) DeleteAll(arg0 context.Context, arg1 resources.T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockStorageMockRecorder) DeleteAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockStorage)(nil).DeleteAll), arg0, arg1)
}

// BeginTx mocks base method.
func (m *MockStorage) BeginTx(arg0 context.Context) (context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockStorageMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockStorage)(nil).BeginTx), arg0)
}

// CommitTx mocks base method.
func (m *MockStorage) CommitTx(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockStorageMockRecorder) CommitTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockStorage)(nil).CommitTx), arg0)
}

// RollbackTx mocks base method.
func (m *MockStorage) RollbackTx(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockStorageMockRecorder) RollbackTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockStorage)(nil).RollbackTx), arg0)
}

// SubscribeToCreate mocks base method.
func (m *MockStorage) SubscribeToCreate(arg0 context.Context, arg1 resources.T, arg2 resources.Subscriber) (resources.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToCreate indicates an expected call of SubscribeToCreate.
func (mr *MockStorageMockRecorder) SubscribeToCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToCreate", reflect.TypeOf((*MockStorage)(nil).SubscribeToCreate), arg0, arg1, arg2)
}

// SubscribeToUpdate mocks base method.
func (m *MockStorage) SubscribeToUpdate(arg0 context.Context, arg1 resources.T, arg2 resources.Subscriber) (resources.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToUpdate indicates an expected call of SubscribeToUpdate.
func (mr *MockStorageMockRecorder) SubscribeToUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToUpdate", reflect.TypeOf((*MockStorage)(nil).SubscribeToUpdate), arg0, arg1, arg2)
}

// SubscribeToDeleteByID mocks base method.
func (m *MockStorage) SubscribeToDeleteByID(arg0 context.Context, arg1 resources.T, arg2 resources.Subscriber) (resources.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToDeleteByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToDeleteByID indicates an expected call of SubscribeToDeleteByID.
func (mr *MockStorageMockRecorder) SubscribeToDeleteByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToDeleteByID", reflect.TypeOf((*MockStorage)(nil).SubscribeToDeleteByID), arg0, arg1, arg2)
}

// SubscribeToDeleteAll mocks base method.
func (m *MockStorage) SubscribeToDeleteAll(arg0 context.Context, arg1 resources.T, arg2 resources.Subscriber) (resources.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToDeleteAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToDeleteAll indicates an expected call of SubscribeToDeleteAll.
func (mr *MockStorageMockRecorder) SubscribeToDeleteAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToDeleteAll", reflect.TypeOf((*MockStorage)(nil).SubscribeToDeleteAll), arg0, arg1, arg2)
}

// FindReleaseFlagByName mocks base method.
func (m *MockStorage) FindReleaseFlagByName(ctx context.Context, name string) (*release.Flag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReleaseFlagByName", ctx, name)
	ret0, _ := ret[0].(*release.Flag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReleaseFlagByName indicates an expected call of FindReleaseFlagByName.
func (mr *MockStorageMockRecorder) FindReleaseFlagByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleaseFlagByName", reflect.TypeOf((*MockStorage)(nil).FindReleaseFlagByName), ctx, name)
}

// FindReleaseFlagsByName mocks base method.
func (m *MockStorage) FindReleaseFlagsByName(ctx context.Context, names ...string) release.FlagEntries {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindReleaseFlagsByName", varargs...)
	ret0, _ := ret[0].(release.FlagEntries)
	return ret0
}

// FindReleaseFlagsByName indicates an expected call of FindReleaseFlagsByName.
func (mr *MockStorageMockRecorder) FindReleaseFlagsByName(ctx interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleaseFlagsByName", reflect.TypeOf((*MockStorage)(nil).FindReleaseFlagsByName), varargs...)
}

// FindReleaseManualPilotByExternalID mocks base method.
func (m *MockStorage) FindReleaseManualPilotByExternalID(ctx context.Context, flagID, envID interface{}, pilotExtID string) (*release.ManualPilot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReleaseManualPilotByExternalID", ctx, flagID, envID, pilotExtID)
	ret0, _ := ret[0].(*release.ManualPilot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReleaseManualPilotByExternalID indicates an expected call of FindReleaseManualPilotByExternalID.
func (mr *MockStorageMockRecorder) FindReleaseManualPilotByExternalID(ctx, flagID, envID, pilotExtID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleaseManualPilotByExternalID", reflect.TypeOf((*MockStorage)(nil).FindReleaseManualPilotByExternalID), ctx, flagID, envID, pilotExtID)
}

// FindReleasePilotsByReleaseFlag mocks base method.
func (m *MockStorage) FindReleasePilotsByReleaseFlag(ctx context.Context, flag release.Flag) release.PilotEntries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReleasePilotsByReleaseFlag", ctx, flag)
	ret0, _ := ret[0].(release.PilotEntries)
	return ret0
}

// FindReleasePilotsByReleaseFlag indicates an expected call of FindReleasePilotsByReleaseFlag.
func (mr *MockStorageMockRecorder) FindReleasePilotsByReleaseFlag(ctx, flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleasePilotsByReleaseFlag", reflect.TypeOf((*MockStorage)(nil).FindReleasePilotsByReleaseFlag), ctx, flag)
}

// FindReleasePilotsByExternalID mocks base method.
func (m *MockStorage) FindReleasePilotsByExternalID(ctx context.Context, externalID string) release.PilotEntries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReleasePilotsByExternalID", ctx, externalID)
	ret0, _ := ret[0].(release.PilotEntries)
	return ret0
}

// FindReleasePilotsByExternalID indicates an expected call of FindReleasePilotsByExternalID.
func (mr *MockStorageMockRecorder) FindReleasePilotsByExternalID(ctx, externalID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleasePilotsByExternalID", reflect.TypeOf((*MockStorage)(nil).FindReleasePilotsByExternalID), ctx, externalID)
}

// FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment mocks base method.
func (m *MockStorage) FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment(arg0 context.Context, arg1 release.Flag, arg2 deployment.Environment, arg3 *release.Rollout) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment indicates an expected call of FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment.
func (mr *MockStorageMockRecorder) FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment", reflect.TypeOf((*MockStorage)(nil).FindReleaseRolloutByReleaseFlagAndDeploymentEnvironment), arg0, arg1, arg2, arg3)
}

// FindTokenBySHA512Hex mocks base method.
func (m *MockStorage) FindTokenBySHA512Hex(ctx context.Context, sha512hex string) (*security.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTokenBySHA512Hex", ctx, sha512hex)
	ret0, _ := ret[0].(*security.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTokenBySHA512Hex indicates an expected call of FindTokenBySHA512Hex.
func (mr *MockStorageMockRecorder) FindTokenBySHA512Hex(ctx, sha512hex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTokenBySHA512Hex", reflect.TypeOf((*MockStorage)(nil).FindTokenBySHA512Hex), ctx, sha512hex)
}

// FindDeploymentEnvironmentByAlias mocks base method.
func (m *MockStorage) FindDeploymentEnvironmentByAlias(ctx context.Context, idOrName string, env *deployment.Environment) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDeploymentEnvironmentByAlias", ctx, idOrName, env)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDeploymentEnvironmentByAlias indicates an expected call of FindDeploymentEnvironmentByAlias.
func (mr *MockStorageMockRecorder) FindDeploymentEnvironmentByAlias(ctx, idOrName, env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDeploymentEnvironmentByAlias", reflect.TypeOf((*MockStorage)(nil).FindDeploymentEnvironmentByAlias), ctx, idOrName, env)
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}
