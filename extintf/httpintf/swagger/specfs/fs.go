// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    16838,
		modtime: 1565039003,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
