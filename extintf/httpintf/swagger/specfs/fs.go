// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    15950,
		modtime: 1586301493,
		compressed: `
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
BFvIn2F0EvtdtIyjyKPP/xcAAP//rpKJaE4+AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
