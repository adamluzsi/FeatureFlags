// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    17167,
		modtime: 1565156296,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
