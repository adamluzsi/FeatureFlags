// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    16759,
		modtime: 1564701383,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
