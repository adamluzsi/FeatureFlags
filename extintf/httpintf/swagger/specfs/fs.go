// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    14589,
		modtime: 1586429919,
		compressed: `
H4sIAAAAAAAC/+RbUY8bN5J+968oaC/ILjAz8nqzOZxf7hzH9hrwJnMzNvbBGhgldqmbMZtsk+yRhcD/
/VBFdqtbakkzvsQwsn6xRt0ki8Wqr76qon59ADBTzoa2pjB7DG8fAADMsGmMVhi1s/NfgrOzBwA3Z/xu
413Rqru9G9ZYluRnj2H26OLhTL7TduVmj+HXNLagoLxueCy/9boiaFrfuEDgVhArHWAwPegA0UHj3a0u
CJ5cvgR3Sx7+8fr1JT+IriwNeQjkb7Wis4XVFtaVVhVsXAsKLWgbyaOKsNaxglhR9zJoC8hTlx7rGqNW
sMbNhQgNMIs6GmIR8+IhrW7T2gY35EWCinal6Ke4JR/yPm//ykr6JApZYqBLjBV/P8dGJzU1GKuw1dPc
kyEMdL4yWG6/5xddiIO/p3SqA7iGfFIhGuPWQfQRHShPGAkQLK0hrwG8Rie1zLhnH/n7qZNP/24Go/cs
5l6jg6poYukqxmYgYv4mTM8Rk85GE+TNjudYEcbW735psDwgW1vX6Des5aedIodKhFhhFLNbErSBClg5
DzVaLLUtASGvB94Z49o4Unp/ZC8LXiCd1FWa/TmLNFQxeqwpkt/d5q+DzwAzi7UY8Q+u2Iw2KY7JT5YT
T+QIcGRknWI3jcznlr+Qijvj0tE35KOmMDEaYCb7mHoCMPsPTyue+0/zglbaalZFmD8fHUb379ODY38P
//o0eZCeQuNs2BNz9ujhwz35BpL14+Z7x3OVHw2F/TSyq+/uOjd57/zp+f7+/5/vwe6n9H9ep0ehuQ7n
2XTPS+OWaMzmnCwuDRUX4sr3AagraswGlqjew7qiWDGSVjTyDSrAtRG6tcB5sC5eLKyAmw5AoSGl5Vkb
aNUa8TSFgQJP6kkAr3D22wgV3hI02rgIurhY2OtWVfIqT7TEqCoOA4pC0LY847UK9O/BYGtVBSujm3Cx
sD9s4EdaYWviWYpTa20M+3nBflhrS8V4O4wH9FGHeMZik4XR4w42dMFSchABuiW/4c9pt7DcQENekY1Y
kuydgGzROG17kFEoypLgJpHpxbPXUFOsXAEYYE3GnC3s5c/Xr3mzAklutdJZdc6aDa8c2qZxPkLtQoRK
l5XZAC5D5MBJBTDSgjKabAz/LnFCAu94IjGh04GhIvUerhLAw/Ns1NcRYxvESF+IUfNZHEH/lyGPfJFd
4Fnytq8hCEwD9SGJr+hDSyHK4l8cpckymtRk4x8Snm/nytmVHobUWUl3oIc9jEzj6D/dUhuCRfvw4aPv
4fryCZPy8LVA0NnCJohvGbChwY1xWPAkbSOfFFrBTwLl6sZQ7MRzAr8yVxLwjw9nCbTOfkcmfEWx9ZJn
bONeiBgpJDq8xgA+gQAVnHXJW3jrPKd8CJcs4TEmXFKUd54mW/9taZyYVJr5DwkR63AUHAKp1uu4OR5B
sNHv3pO8dHMStY/ijWq9JxvNBmpCG8VpGRGWG0mfyQdAW3T0p+McCXjAEwbHmFNpW0htgO1LR/5YM6mr
nScgDIIoCo1qDSdp4vtpevjQoo06bs4WNlZo07O0zvaZyMBYQSuekQ1WgGWJBq1i0Bmt2DFAHaJWAqCD
OkMWfk3L4NR7isD5f8HIVLe2q3PkJJ2HdmqIDgoHxq2B92DVBj60Wr3vXCmhoFYVi6ILQiN7FvLRu2Bm
HNoW+lYXLZp+dFJdJyZ58KRI35IwXVLYhrRtm+iL1GaI6WjQIbKulLOWFAt/Bq+fXg7+lhJNRSgnxFqp
0eyGDmYGgvq8+OFUgIVHKPUt2Z7AC/tP1GKYFgwnN8FNrZCyiQFAJXWFLkrleRJx74lDqiA1nmI6qk4z
AWu2ilIrHp+MMJn+cgtzhVMtTyJDv5pY8zm0d/RV0uT4u97ATwaM6+QHTy5fbk12ly9zRp1J85HI8K9+
za+WFvciZh58mdjK102F//6bx7m/3W2+dXjlsPhBYJae+fuFvL7COtD/tqL6bG//cvCD4DhRm1bOCtp1
uT6aNW5CQqQz8FSiLwyFAHq1k/SHnZpFRaYJCRPolgwbcsjRj8EDAyDY1hhIpbXR5BNF5gRgW0Q5VJnb
1rH399/vyguDS/ULuwXfQRTRAwo3WPRAuW+2tbVdc90tBWW3H605wN60/MUYabqtLp0zhHb88ON56c47
197uebZvNP0uZEiD6j2WMqrUsWqXF8rV86z1c+26j3P6GLWNqznz8P4DNno24l3Pho6xa2inz2p3dB9Z
hJmI16UI3rMoSXYkpAiZQghuFdfIfMiW2hL5u5wbT3ziyEQ2cQzUtrPoiNqEjiWkWSaPbKJufKxmPFOu
oCmsnXbVEFGYSUEjUaar8sYpNDpINNkvZHcCc/Avye+/sHK+xphf+f67/RdGhviU97H3Cn1ETk9nj+G7
h38dB4SdqFNTCMk676KK/Hbad285A324MRDBuhKyyV/KhlOMvVjYn9zYxPissERO5PIkZIvzNpDP5Omf
eekaN6AqtCX1GV/LHn4mTClmOPSEBS61SXy8SRXRwgn99yTVARnbwbC2gHYDa9zkVF4o/C9tiDKVEPN4
cfg0Q/TalifOKm/hSIQ+Ajhi+l8Ya3aaKrsWIVRKJ09dYtAKSLKclPpsvS+ZywiJK2eKcDrGHIITXZzA
kpc/gqfGU+DDTWUBFbvURIccC/s4NUg/slFdtxOAcuS0x6f18sfBUQ3IVn7+62dN+hP/Pzltbvrtzny4
75Wj429nT4WrGbS7ts6+GV3tiXjvQ/doi3eBqHgX0JyM/2iLa6Jit0st9Zg2p948o6stM6Eut972RXI6
nbLDIXMgk9LRjoDdomkZSVpTpI7QksiCpZLfS0Ez1RN7HscnysQsrQ+8p7OFXbbZQtcylSdOxPIg+qgT
momgVJS015Jao40Lm4kfQtC1Nuiz/KV3bZO4YGiVohCkIsvCZOOBpZQkDjCiqWh1NFKNTbc7jWnzDdFj
pHJzb/u97gZ+cTu+3hf53vZckNJBO/tOcv13jL53UsCbq1fTetza7gnnuNwa+dg9ZBmCyq2h5njoVvzE
s0l58QcIlRjnkrJLsIcEaguXjdlsfh8L2or8hQ77Ll2nOxw+JzfaUzGqGPQ18Qc7+fhBW+kGHD/XrsaR
Y/Ko5CGYk8qaASxRkZjWMteqMncd5FefF/meT1X7t3S0C1V903/cCPgytIYd6Hh2XpIlj9KyqrdEggrQ
4fHCLuzb1FR5fPN2Pn/LzqHtyv3PTeVCvHk7v2kwVm//+0NLfnPz9k8rjyVr9IZHvrl6lflQZqMhos93
yBCCwVABrmIuV6ZlgJOtvljIMS1JkYVwDX5o6cB6P7lI25LsJcYKVpqMFDtDdD5VFAvi3EZMoH4M82++
+89vvl9982gFS1KupgDzF25+sbBPJBliD7CKdurkum5cCDpXRyMZky/MyaYodMxKZFiTp4XdeeJxDW+u
Xkkmmobya/DNo9UFSKQtdIjaqu4Cn0eh8ryw5wQtx1CpNYhMZ5njFz1ucWy8wjXLcAZowcmx80mLUtKq
0jksKYaFDRS7CkyR7mgAWeWKXKkv9GpFnlnByrtatnaRT/nbANfiLF3Hsg2U3PJZUNhQIXrIz6IDt+S0
N3EQngauSYL/wk68L5e/coOAE+T7lGueiI57o2ZK0KBnqsPf/zmSqqxWjHhngPDm6iV4kk0q+ssdMv3n
ziv6XzbFQ0S3q65MxrDn2XhPsOTJsf/YvR90x3E/iwN9zsh82/Le47IJfubQo9o9NvZaAONzRr4J5O/I
TjIa3gfULcV5680OSncTHYfq7jXgbbBPogVd122UPg1ZhU1oTeqwuJUwmUS/bbGwDYawdr7oC02pL/Tm
6tUFPLGp3sou3C+SuL4OULbo0UaiQji38H7czs648efGcUaZbiNQ3Uj7LyTGldKCq+dP4dHf/uv7v5wt
LINeh0ZmI06ZZLuDb99Jn4f6BZ9NYvqWyd1pTIERT3CYHzFiX5ZRzqcSfrG9ZY2N7m5m9IXB1MjrBTpU
150qEo7YCy9+iLrsFBC3jGxWb86nLjl0dYrU5zrXRVpmuuEw1Yo6oamf+5vYo0qcqlwYKiPFaGZ8IRM+
+kiqHdXbT3I8sm290/QacuT9O2RHOfRQBzeHT6Pf4EE2uSfAl2KSfUdov302m7z5cRjEXowuofQtlNQ6
YW6UkiRp5i9dG/Mlz9Qz8d+GPoHvCmx7XQ4a8oOJNuNh/zhcQu/v+uw5xt6d3FR8lYrfaDeeTKr3Di6t
yo122ss/Tl0QP349fLb7U4cjGRS/KbIm/p1uG2WUGV7I779Mp71X+T19pR1ghkWhE+JfHr/efow9Hajs
T6RmooXj99t31Dou4gzT5LtdEjp8l/2wPzw9NKZziXvZ8qRYEx3rw/JMtDd/Q9884ZnTHOtAx3l6r6NG
+pFtDt9LhfG+FYfQwVzeZt5iCi0VFhBcTfBeM4dZQePd0lCdGzcdtepq7doq0xbbmyxLV2w+Twt7ndBJ
BRzs/B/Wxb+u94cMetpyn0nkl7v+6czly+6SVXdRNOJ7SonaOgwuMoWudJy6ZnUb5E5phbYwiRl6in7T
1Yw5GYPWRm04rZX6LRU7UwxaaXxayt2STwyYn+ejqDnD7H4Vlyre6UcP0UHJz/jEvTPpt3CVW0O6izYS
vut3uoZZhpVSsy1Nf99LS7dUfjMXHASFpttHd8MgT0AYNDNdVWm6lQ293Go0VbFweDuOfGdvrKYke/Ro
Q4Pp5l/++UTWCG4g39XtTux3sTJmAg8+/V8AAAD//yx9SRT9OAAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
