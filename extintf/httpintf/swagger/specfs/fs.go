// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    15956,
		modtime: 1574377596,
		compressed: `
H4sIAAAAAAAC/+w7227cRpbv/oqDng0yA0hqx5PJYv2y6/iSMeBJtJKNebAE43TVabKiYhVdVVSbCPzv
i1NVZJNNdrfkzWiNYP3iFlmXc7/zt0cAC2GNbyryi6fw/hEAwALrWiuBQVmz/NVbs3gEcH3Ca2tnZSPu
ttZvsCjILZ7C4snZ40V8pszaLp7Cb2mvJC+cqnkvr3pbEtSNq60nsGsIpfIwOB6Uh2ChdvZWSYJn56/B
3pKDv799e84vgi0KTQ48uVsl6OTKKAObUokSWtuAQAPKBHIoAmxUKCGU1C0GZQD56MJhVWFQAjbYnkWg
ARZBBU0MYr7cp9tNultjSy5CUNIuFP0Rt+R8xvP2OybS50iQFXo6x1Dy8yXWann7XaJUjaH0W1IthVZk
wlJYs1bFWaR09xJgUVAY/DlHWuWBjKytMgHI1yQUat1C42ndaFhbB/+wK6UJrprHj5/8AJfnz5j4/uzK
MF/6vUzGFYFArUkmOkYi/PTyLVQUSisBPWxI65Mrc/7L5VtmW+NJgl2vVb7VGt0ywXxT19YFqKwPUKqi
1C3gygfmEUkoQ6ghIe5PrsymJEfQeGUKqLHVFiUf0tTxl0BjbIiw2arWFDrwbCjJpbMSgL5jSqTURPzz
8znBTv+uB7snCnGv3V6UNHM1wzoAMT/x82cELCYHONKEnk7XGovxQbXSNuwBpqkqdC2LywWFxhlAraNM
8zHgAwbyEEoMsEEPjj425JnKyqRVeGsdKy7COd8yorKtyUVqvJZ8wfPI1OdRmIfLanRYUSC3i9Jvg98A
C4NV1McfrWxHCEYbw29WM28iuXGkKB0R2zqeZ1e/kgg7+yJBPzbKkdyBqrtRTnZsmfCBqTfg3YTwW0mq
yQVFfgbAdMnc86muR+K//BRev4gWMxrVlVYCGqM+gpKJhUqSCWrdxgVRmx0k4TiZu6MjkA9OmWJ+zafT
wp52nNlCMb+YPiFraTSqvPSUPgVyBvWpkqfRap8qf8ognypzGko69a0PVC0mh30+Svu70e0i7XnFWwAd
Rcpo5QPLdO3ULQaCfHBSCcY1UdOXttGSjU+FQZQkAQtUxodEf0YQ0MikRPEZGWe1rsiEaHwJRXl2mPTo
HLbzS1Sgah+aU+bNLPp8nKFD8hxj6ft5OKr2dGSZZlZdT9n76NDfw78+z5o1R762xk/UavHk8eMJyRb/
5mjN2P5p2e/LrjcZq4v8dAj7iHiL7+96LDln3fHz/va/P+/R7q/0f75nscxMWTJTlsIRBppEGLX1dwgx
ejPPvsNufIy8goV0KCAY2gALvm0CrAlD45Iu/fFdckJ6fMa8Nuxxys8TDVkBLzIFX2UKvhr7+Ym3jTvz
prxnd8v/lefdSrKktTKKofbLVxPz8CCKvodOf2ilV/40K+Jpoe2K4/NTMrjSJO9vBC6o1i2sUNzApqQY
eMfQMMspKwFnAk2A7i6wDowNMc1QniOW+exEoCcPKQVgoyKt+TZAibede1Xy7MpcNqKMS/mgFbtiTuoE
eU4aTvguie4GNDZGlLDWKiY4P7bwgtbY6HCSss6N0pqduWSFqJThVGKIDjt/+qR8OInZkYHR6y5GUJKh
5JQQ6JZcy78TtrBqoSYnyAQs6GtJsf4/LTpmgUsSN7BrfC8DhsZHIf0pCjXz4oA1fu3zzp+yCrxM2vb1
WuN9EF+kFDBe/uDGehtA/yHN88YfrO94Eo1ToT0sHlirDzcUF10fZcnBkpFonCMTdAsVoQmx7sIWZ9XG
Shc5H/ObbNs6g5IMGzhCb9mmlcrIlJRyBhr4Z8UWu7KOgNBHiyVQi0ZzqBNNXzoePjZoggrtyZUJJZr0
Lt2zfRdhYDtMa9slcBYlrFCjEcoU4xs78658UCIq8KAkmIHf0MpbcUMBVsgIC1tVjelKkjnK5a0dGYIF
aUHbDTAORrTwsVHipquXpEKWEiWDoiShjjhHy9LXWbI5UUaqWyUb1P3uRLoOTHLgSJC6pejGSGDjE9om
2aZYRiX2NV75wLQS1hgSDPwJvH1+Pvg7VlNLwsghpkqFetc1sdpHr8KX7/fzDDxCoW7J9N45uvZkN4Y+
f3i49nbuhhQqDKpQiVy+84L5nOSVt2l1LPbWjkJiVUcZz0m7toUSvD8JYRL91baWJa1o+JC49avxi1/i
00aPEiXHz3oBP+r+LpMePDt/vRXZuUwke8QDLvCf/Z1frc/rQcxO7jwVnL9uP/e3393P/fVu5238G4vy
x2hm6aW7n8vrmyED+m87H89nqi+R9QP3ONNIEtZEe0efaoqRbrApqI7VOWXA2yoaqoqNZDYr1gRUhtxW
4/dVhrctoX3wpSQiH5nzgq5iPqx8dIX1ZDMFubi+HlfQ91WHO/Xfla750iaUVksPyjDaySo6Yi8lR3lL
hQYLYokbW4oDRfJD1evFviLsLpSp8sowJkOd6JJd2LDw2j9M/n9arj9Wzkcpo5ihPj9Sde9OWlmrCc1u
yXJSNx3XTF9NS/+f9yrbXLV1MdWZXiTi+hrFDRZxS6FC2azOhK2WuQl5qmz3c0mfgjJhveSUqf+BtVqM
ws6XE2NzD1XrsmbUG2x9cv8n4KhAJzV5D2q9kz77ney/JF2nloWkW9LMGp9DTfbU6AHBNFpDYuzo8Jnm
axKh+yjzFP8eKxd7YqkSYKYa3MTaRa/id1DdrWE/pr0z9dJhoJOuP5tX1k5w94vaFucHl7ahF9oVtOO8
2t3dh3ExDYguLoXLfcoSm8MxfouZC4K367BBTj5MoQyNLP9evvHBR1gWYeuMfyfRAZXuTVc65Xexr8JK
uoN5zarqA8Y0QNIIlESpXHqKqR07JG0FauWjr9hvZjnSLshNFyQ/k5f88P3isLV8znhMlmy7St8//u7R
AeO7qMj7JJ13IUVenfDuJWdADzs2RLApY2bHDyPCKaA9uzI/27GIMa+wwBx0pGafPG08uZyp/CNfXWEL
okRTUN9Db1jDT2JaErI5dIQSV0qn5LdOblDamGs7iqW+5AyzGVYG0LSwwTaPPsR8+dfGh3hUzILD2X5u
7mnxjnmVUfgi3xaV46FtTewo7PdjMW/J7fIVeiWAYkkh1Rm22pfEZWSJY1B13MfsMyeTvv4uaK9fgKPa
kWfmpkELEbo6gPLZF/Z+apDrZ6G6bGYMygFuj7n1+sWAVYPMJr//7YsO/Zn/nz2265PtnLy/TZS94+8n
Tzl48F2HZCpHFxMY7811h0Z+8ETyg0d9NABAIy+J5G5TNeYcTS508Ym2MhwKdZWsbYshF69SLWYYOpBO
xZ8uArtF3bApabRMzZUVkQFDhU5Z1KrNA1h9IBeHINDn+4FxOrkyqyaL6CYe5Ug2gvIm+qSSOUuTD7Kg
SXdngyZcmRz5IXhVKY15QAUKZ5s6BYO+EYK8j00iBqZrLa9iAXBPSDTnrg66qp3QPHNjXn59cBioaO8t
wJfdxocX5MspzPcWaElCeWXNh1ha+8D2904UeHfxZp6QW+E9oh3nWykf60e8hpPeDae0LYc7rW0cy5SL
CjEY20k6wSriqZE2S7Nu/zUitAX5obh9lxbOHbg/Owe3yO6ww+X6qLB0Gw4ztqspZrc8KjFuR6+UB0Mk
txWeksRNDl8HKdaXOb9853jFYHQt25u+gz4e5HiYyIY16HCCXpAhhzpVu/pYgiQo//TKXJn3qeH69Pr9
cvmetUOZtf2v69L6cP1+eV1jKN//58eGXHv9/k9rhwVT9Jp3vrt4k0OiHJD6gC6PVyN4jb4EXIfcHkjX
xNm6vjjPXi1BkYGwNX5saM99P9tA2xbIOYYS1op0bC74YF0q7Uni9CaKQPUUlt98/+/f/LD+5skaViRs
RR6WP9nl2ZV5FvMh1gAjaKcvparaeq9yNyKQ1nmWPCJFvguuIgwbcnRldt443MC7izcxGU1beRl882R9
BtHXSuWDMqKbbXcYo3m+2HGOlr1oLDdEmE5ymC97w8Xe8QI3DMMJoAFbp6pWJkq6NU4CFBT8lfEUuiKM
TAMPQEZYmTtjUq3X5OJIorNVRO0sc/lbD5dRWboJhMZTUsuXXmBNMtIhvwsW7Kove7L4nMElRfd/ZWbW
s6p2DTnOke9TsXkWadwLNQcFNToOdvj5nwOJ0ijBFu8EEN5dvAZHEUlBf7lDsv/KOkH/zaK4L9adVAaH
TuxVFt4jgfLs3r/vDtvccd8vUYG+ZGf+EOHe+7IIfuHWg9Q9tPcyGowv2fnOk7tjeJKt4X2MuqGwbJze
sdLdQYdNdbcMGA3WSTSgqqoJsS9KRmDtG51q93YdQ5kUgBt5ZWr0fmOd7GtNqafw7uLNGTwzqeTKKtxf
kqJ95aFo0KEJRDJG3THyx+3pbDf+XFtOKtN0EVV1bLf7FHKlxODi1XN48tf/+OEvJ1eGjV5njXQblTLB
dgfdvhM99/XnvjiI6VuUdw9jJAY8EsO8wIB9ZUZYl1pmcvsBEtaq+5ilrw2mxnkP0L7S7lydcBS98OX7
QpfdHk0fkS2qtgtnJt1VuR3XVzJdM9/gm2v9HqHUL/3o8KgYJ0rrh8RIPpojPp8DPvpEohmV3I/GeGSa
ajKmvo2RpwNZB2PoIQ2u93OjR3BvNDkB4KEiyb4DO21XL2an3/cbsbl2aO6djDuPuLJNGPVF3bd+Mhs+
aXPQMDqYaervseN7u8iz01dHB4EP4H9k6+9JiyOU2LETs5jOTBfsx22mO/Zw2MzzdU/Dch7X0dDDATSH
60ZtfI4uOxXJaGYUk1kqUaa5ghvF/m8NtbMrTVWu+3duuSvVKiN0I7dTRysr2y+jwqSRNkuAvVMa+2nx
z8vplkFLNM6eRfjj0HXieXzYDcR132UGvKEU5G/8YOjMd4XH1HSpGh8/4SzRSJ2iCkfBtV3FkQN5aExQ
mlOiWP0juXPEoBPD3BL2llyKnvh9ZkUVhyzyx8apXpqmz4OFgt8xx53V6RPj0m4gzQ2OgO/aZbZmD2Vi
odIUup/NU7HZFj9F9ha8QN3h0TWo8wGEXnGUJEpFtxGh11uKpgoIDicZyXXyxmRKsAeHxteYpjTzHHum
CLaQP43tOPYvkTL2Io8+/08AAAD//1+HAtpUPgAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
