// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    15953,
		modtime: 1584658771,
		compressed: `
H4sIAAAAAAAC/+w7227cRpbv/oqDng0yA0hqjyeTxfpl1/ElY8CTaCUb82AJxumq02RFxSq6qqg2Efjf
F6eqyCab7G7Jm2iNYP3iFlmXc7/z10cAC2GNbyryi6fw/hEAwALrWiuBQVmz/MVbs3gEcH3Ca2tnZSPu
ttZvsCjILZ7C4snZ40V8pszaLp7Cr2mvJC+cqnkvr3pbEtSNq60nsGsIpfIwOB6Uh2ChdvZWSYJn56/B
3pKDf7x9e84vgi0KTQ48uVsl6OTKKAObUokSWtuAQAPKBHIoAmxUKCGU1C0GZQD56MJhVWFQAjbYnkWg
ARZBBU0MYr7cp9tNultjSy5CUNIuFP0Rt+R8xvP2r0ykz5EgK/R0jqHk50usVSJTjaH0WzothVZkwlJY
s1bFWSRz9xJgUVAY/DlHV+WBjKytMgHI1yQUat1C42ndaFhbB/+0K6UJrprHj598D5fnz5jy/uzKMFP6
vUzDFYFArUkmIkYK/PjyLVQUSisBPWxI65Mrc/7z5VvmWeNJgl2vVb7VGt0ytXxT19YFqKwPUKqi1C3g
ygdmEEkoQ6ghIe5PrsymJEfQeGUKqLHVFiUf0tTxl0BjbIiw2arWFDrwbCjJpbMSgL7jSKTURPbz8zmp
Tv+uB7sn2nCv3V6UNHM1wzoAMT/x82cELCYHONKEnk7XGovxQbXSNuwBpqkqdC2LywWFxhlAraNA8zHg
AwbyEEoMsEEPjj425JnKyqRVeGsday3COd8yorKtyUVqvJZ8wfPI1OdRmIfLanRYUSC3i9Kvg98AC4NV
VMYfrGxHCEYDw29WM28iuXGkKB0R2zqeZ1e/kAg7+yJBPzbKkdyBqrtRTnZsmfCBqTfg3YTwW0mqyQVF
fgbAdMnc86muR+K//BRev4jmMlrUlVYCGqM+gpKJhUqSCWrdxgVRmx0k4TiZu6MjkA9OmWJ+zafTwp52
nNlCMb+YPiFrabSovPSUPgVyBvWpkqfRZJ8qf8ognypzGko69a0PVC0mh30+Svu70e0i7XnFWwAdRcpo
5QPLdO3ULQaCfHBSCcY1UdOXttGSjU+FQZQkAQtUxodEf0YQ0MikRPEZGWe1rsiEaHwJRXl2mPToHLbz
S1Sgah+aU+bNLPp8nKFD8hxj6ft5OKr2dGSZZlZdT9n76NDfw78+z5o1R762xk/UavHk8eMJyRb/5mjN
2P5p2e/LrjcZq4v8dAj7iHiL7+56LDln3fHz/v6/P+/R7q/0f75nscxMWTJTlsIRBppEGLX1dwgxejPP
vsNufAy7goV0KCAY2gALvm0CrAlD45Iu/fFdckJ6fMa8Nuxxys8TDVkBLzIFX2UKvhr7+Ym3jTvzprxn
d8v/lefdSrKktTKKofbLVxPz8CCKvodOf2ilV/40K+Jpoe2K4/NTMrjSJO9vBC6o1i2sUNzApqQYeMfQ
MMspKwFnAk2A7i6wDowNMc1QniOW+exEoCcPKQVgoyKt+TZAibede1Xy7MpcNqKMS/mgFbtizugEeU4a
Tvguie4GNDZGlLDWKiY4P7TwgtbY6HCSUs6N0pqduWSFqJThVGKIDjt/+qR8OInZkYHR6y5GUJKh5HwQ
6JZcy78TtrBqoSYnyAQs6GtJsf4/LTpmgUsSN7BrfC8DhsZHIf0xCjXz4oA1fu3zzh+zCrxM2vb1WuN9
EF+kFDBe/uDGehtA/yHN88YfrO94Eo1ToT0sHlirDzcUF10fZcnBkpFonCMTdAsVoQmx7sIWZ9XGMhc5
H/ObbNs6g5IMGzhCb9mmlcrIlJRyBhr4Z8UWu7KOgNBHiyVQi0ZzqBNNXzoePjZoggrtyZUJJZr0Lt2z
fRdhYDtMa9slcBYlrFCjEcoU4xs78658UCIq8KAemIHf0MpbcUMBVsgIC1tVjenqkTnK5a0dGYIFaUHb
DTAORrTwsVHipquXpEKWEiWDoiShjjhHy9LXWbI5UUaqWyUb1P3uRLoOTHLgSJC6pejGSGDjE9om2aZY
QyX2NV75wLQS1hgSDPwJvH1+Pvg7llJLwsghpkqFetc1sdpHr8KX7/fzDDxCoW7J9N45uvZkN4Y+f3i4
9nbuhhQqDKpQiVy+84L5nOSVt2l1rPTWjkJiVUcZz0m7toUSvD8JYRL91baWJa1o+JC49avxi1/i00aP
EiXHz3oBP+r+LpMePDt/vRXZuUwke8QDLvBf/Z1frc/rQcxO7jwVnL9uP/f339zP/e1u5238G4vyh2hm
6aW7n8vrOyED+m87H89nqi+R9QP3ONNFEtZEe0efaoqRbrApqI7VOWXA2yoaqoqNZDYr1gRUhtxW4/dV
hrf9oH3wpSQiH5nzgq5iPqx8dIX1ZDMFubi+HlfQ91WHO/Xfla750iaUVksPyjDaySo6Yi8lR3lLhQYL
YokbW4oDRfJD1evFviLsLpSp8sowJkOd6JJd2LDw2j9M/n9arj9Wzkcpo5ihPj9Sde9OWlmrCc1uyXJS
Nx3XTF9NS/+f9yrbXLV1MdWZXiTi+hrFDRZxS6FC2azOhK2WuQN5qmz3c0mfgjJhveSUqf+BtVqMws6X
E2NzD1XrsmbUG2x9cv8n4KhAJzV5D2q9kz77ney/JF2nloWkW9LMGp9DTfbU6AHBNFpDYuzo8JnOaxKh
+yjzFP8eKxd7YqkSYKYa3MTaRa/id1DdrWE/pr0z9dJhoJOuP5tX1k5w94vaFucHl7ahF9oVtOO82t3d
h3ExDYguLoXLfcoSm8MxfouZC4K367BBTj5MoQyNLP9evvHBR1gWYeuMfyfRAZXuTVc65Texr8JKuoN5
zarqA8Y0QNIIlESpXHqKqR07JG0FauWjr9hvZjnSLshNFyQ/k5d8/93isLV8znhMlmy7St89/uujA8Z3
UZH3STrvQoq8OuHdS86AHnZsiGBTxsyOH0aEU0B7dmV+smMRY15hgTnoSM0+edp4cjlT+We+usIWRImm
oL6H3rCGn8S0JGRz6AglrpROyW+d3KC0Mdd2FEt9yRlmM6wMoGlhg20efYj58i+ND/GomAWHs/3c3NPi
HfMqo/BFvi0qx0PbmthR2O/HYt6S2+Ur9EoAxZJCqjNstS+Jy8gSx6DquI/ZZ04mff1d0F6/AEe1I8/M
TYMWInR1AOWzL+z91CDXz0J12cwYlAPcHnPr9YsBqwaZTX7/6xcd+hP/P3ts1yfbOXl/myh7x99OnnLw
4LsOyVSOLiYw3pvrDo384InkB4/6aACARl4Syd2masw5mlzo4hNtZTgU6ipZ2xZDLl6lWswwdCCdij9d
BHaLumFT0miZmisrIgOGCp2yqFWbB7D6QC4OQaDP9wPjdHJlVk0W0U08ypFsBOVN9Eklc5YmH2RBk+7O
Bk24MjnyQ/CqUhrzgAoUzjZ1CgZ9IwR5H5tEDEzXWl7FAuCekGjOXR10VTuheebGvPz64DBQ0d5bgC+7
jQ8vyJdTmO8t0JKE8sqaD7G09oHt750o8O7izTwht8J7RDvOt1I+1o94DSe9G05pWw53Wts4likXFWIw
tpN0glXEUyNtlmbd/j4itAX5obh9lxbOHbg/Owe3yO6ww+X6qLB0Gw4ztqspZrc8KjFuR6+UB0MktxWe
ksRNDl8HKdaXOb9853jFYHQt25u+gz4e5HiYyIY16HCCXpAhhzpVu/pYgiQo//TKXJn3qeH69Pr9cvme
tUOZtf2v69L6cP1+eV1jKN//58eGXHv9/k9rhwVT9Jp3vrt4k0OiHJD6gC7PViN4jb4EXIfcHkjXxNm6
vjjPXi1BkYGwNX5saM99P9lA2xbIOYYS1op0bC74YF0q7Uni9CaKQPUUlt989+/ffL/+5skaViRsRR6W
P9rl2ZV5FvMh1gAjaKcvparaeq9yNyKQ1nmQPCJFvguuIgwbcnRldt443MC7izcxGU1beRl882R9BtHX
SuWDMqIbbHcYo3m+2HGOlr1oLDdEmE5ymC97w8Xe8QI3DMMJoAFbp6pWJkq6NU4CFBT8lfEUuiKMTAMP
QEZYmTtjUq3X5OJIorNVRO0sc/lbD5dRWboJhMZTUsuXXmBNMtIhvwsW7Kove7L4nMElRfd/ZWbWs6p2
DTnOke9TsXkWadwLNQcFNToOdvj5nwOJ0ijBFu8EEN5dvAZHEUlBf7lDsv/KOkH/zaK4L9adVAaHTuxV
Ft4jgfLs3n/sDtvccd/PUYG+ZGf+CuHe+7IIfuHWg9Q9tPcyGowv2fnOk7tjeJKt4X2MuqGwbJzesdLd
QYdNdbcMGA3WSTSgqqoJsS9KRmDtG51q93YdQ5kUgBt5ZWr0fmOd7GtNqafw7uLNGTwzqeTKKtxfkqJ9
5aFo0KEJRDJG3THyx+3pbDf+XFtOKtN0EVV1bLf7FHKlxODi1XN48rf/+P4vJ1eGjV5njXQblTLBdgfd
vhM99/XnvjiI6VuUdw9jJAY8EsO8wIB9ZUZYl1pmcvv1Edaq+5ilrw2mxnkP0L7S7lydcBS98OX7Qpfd
Hk0fkS2qtgtnJt1VuR3XVzJdM9/gm2v9HqHUz/3o8KgYJ0rrh8RIPpojPp8DPvpEohmV3I/GeGSaajKm
vo2RpwNZB2PoIQ2u93OjR3BvNDkB4KEiyb4DO21XL2an3/cbsbl2aO6djDuPuLJNGPVF3bd+Mhs+aXPQ
MDqYaervseN7u8iz01dHB4EP4H9k629JiyOU2LETs5jOTBfsx22mO/Zw2MzzdU/Dch7X0dDDATSH60Zt
fI4uOxXJaGYUk1kqUaa5ghvF/m8NtbMrTVWu+3duuSvVKiN0I7dTRysr2y+jwqSRNkuAvVMa+2nxr8vp
lkFLNM6eRfjj0HXieXzYDcR132UGvKEU5G/8YOjMd4XH1HSpGh8/4SzRSJ2iCkfBtV3FkQN5aExQmlOi
WP0juXPEoBPD3BL2llyKnvh9ZkUVhyzyl8apXpqmz4OFgt8xx53V6fvi0m4gzQ2OgO/aZbZmD2ViodIU
up/NU7HZFr9D9ha8QN3h0TWo8wGEXnGUJEpFtxGh11uKpgoIDicZyXXyxmRKsAeHxteYpjTzHHumCLaQ
P43tOPa7SBl7kUef/ycAAP//l1nof1E+AAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
