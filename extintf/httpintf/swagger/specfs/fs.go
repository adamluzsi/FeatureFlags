// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    17745,
		modtime: 1566815483,
		compressed: `
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
/i8AAP//4Qv9RFFFAAA=
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
