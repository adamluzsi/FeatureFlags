// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    15950,
		modtime: 1584916714,
		compressed: `
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
kL+L7Tj2u0gZe5FHn/8nAAD//7dUxdZOPgAA
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
