// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    15935,
		modtime: 1571442187,
		compressed: `
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
sB3H/iVSxl7k0ef/CQAA///g/vSnPz4AAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
