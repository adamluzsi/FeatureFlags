// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    17735,
		modtime: 1566655864,
		compressed: `
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
G4eWB5/+NwAA//+lWLXdR0UAAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
