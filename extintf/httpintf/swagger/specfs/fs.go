// Code generated by "esc -o ./specfs/fs.go -pkg specfs swagger.json"; DO NOT EDIT.

package specfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    17221,
		modtime: 1565154475,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
