// Code generated by "esc -private -o ./swagger-assets.go -pkg httpintf ./swagger.json"; DO NOT EDIT.

package httpintf

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "./swagger.json",
		size:    9016,
		modtime: 1563742776,
		compressed: `
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
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
