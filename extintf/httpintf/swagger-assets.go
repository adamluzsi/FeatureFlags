// Code generated by "esc -private -o ./swagger-assets.go -pkg httpintf swagger.json"; DO NOT EDIT.

package httpintf

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/swagger.json": {
		name:    "swagger.json",
		local:   "swagger.json",
		size:    11953,
		modtime: 1564614753,
		compressed: `
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
9un/AQAA//98r22ssS4AAA==
`,
	},
}

var _escDirs = map[string][]os.FileInfo{}
