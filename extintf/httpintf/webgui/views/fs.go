// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/flag/create.html": {
		name:    "create.html",
		local:   "views/flag/create.html",
		size:    2159,
		modtime: 1563916815,
		compressed: `
H4sIAAAAAAAC/8xVT2vbThC951MMc/n9epDk5CwJQkugEEpIybmMtWNpYbW77J/8wfi7l5XkRBV2apdS
4otnNbPvvXmz0m63gjdSM2BPUuNudwEAUAr5CI0i7ytsjA6sA9ZDZsh2V4tk1jEJkD5rWAd2WG+3kH+j
nmG3K4vuarZ3hmyj46ydAS8LVLY2z5lyLQylcfrLLhd7hn0b43qgJkijKyw2ilqEnkNnRIXW+IC/0A7V
r1FGSraaBYKgQNlahidygnX2RKHppG4rPMQ58kpWwnM4nB5KpLYxgKaeK/wxakIIL5Yr7KQQrBEeSUWe
hNYXx6GW9qUBOKOy1plo8biGYbOiNSvYGFfhhilEx1jfjAGkaZXFUPEblLEbKd5AptaS53kK8V2A6Tf2
H/g5nFRuFTXcGSX4TT0kxoE8z/N3mi8LIR//hauWXXoDqGWs741SJga4e312rr0ztLnDbgTOfXAUuH3J
Z3WnG+9IJ9xe6gpXCD09V3i5Wp2EMB3W1Uew3DMLrL8zCzAbCB2DIy1MD9ZzFGa/knrMjd6dO4mB5NAM
EnriPsN4Hfs1uz848+msT7z7rpKuPM/hf2PTd4/Up48wEsGN9NLoaysf7m+x/jKt4fruKzzc357r/gLv
3XdhX3trWtlcW3nGYKJT508ldNIPn6H/PDTRB9PDXgKopGHf9F+a0TqGYPSk2Md1LxcX21QwizPrZE/u
BevPjikw3Chqy2JMHuEqi+PXWlmkK3Nxa4+6DyyncLtlLXa7nwEAAP//kRpWMG8IAAA=
`,
	},

	"/flag/show.html": {
		name:    "show.html",
		local:   "views/flag/show.html",
		size:    4727,
		modtime: 1561470675,
		compressed: `
H4sIAAAAAAAC/9RXX2+juhN9z6cY+aW7KwHdfQ78VCmtFKn6qWq0z1cOnoC1xka2qVIhvvuV+ZMSlgBp
ru4fXgr1+Ng+Z+aMU5YMD1wikIxySapqBQCwZvwNYkGNCUmspEVpSVSP1KPpj8GglyJlwI0Xo7SoSVSW
4D8Jmvj/pxlCVa2D9EcPoAefFxq9pIc+DBDeXh09oROoQ4v2j/d9MKeed1A6AxpbrmRIgoOgCYEMbapY
SHJlLDlbto4+vXlU8EQiG8FtsDkKZtCOD9chXOaFBUkzDMkfzboE7HuOIUk5YygJvFFRoFvfMXoZaciQ
I1or4SVaFTm5vIV6sqB7FHBQOiQ5aqcJTZBEr0oIVVh4Of1vHdShM3DNqTg7Q5uc0j4NEU4FXzdr+8Zq
ajF596+EakjUVCZIIOMyJPcEMnoMyff7+0UILfGnzGzZ8Hfdjj5ogaqaoHgdMP72d2hn0CXjDpGBOoBN
ETSVTGWQGyyY6r64bMaa81wrab3IJ8V0G9gtnd8oKItsj/omwV7bVadVck9ZBt/WJqfyt6r3MjSGJuhx
KbhEEq0DFxd9C1oH/EeFZxhzw5V8yPnP12cSbdpveHjZws/X52s1HuDdWrod3LNKePyQ8yvkL7RYFF2W
wA+XCnVztv7LFqpqtrhH5pCyRMkm9O49uaAxpkow1CGxKTfgqLkzEBfGqgw6SkA4/E4n+KJy14qo+HqL
n/S7Sq2Ie73QV4aNl0RX4HI2h7rdzGDuC2uVbFFMsc/4oOe2Ab13L9c8o/qdRDv6huDWgReNB9QoYzTr
oAm7wNA6uNyX14Gr9f/yNYGhQIv/ChGVjAWPf4VEoy20hFjJA9fZl7sHjfCuCjCFxv/dfR2T21mYOwg8
IbWFbkT+EPav0HVYRe33cGj6ZluWUF8xwH/hQlkDA3doEuc8U87SKMjdvN/TZ/Suejrfaq4hoHQmnKG0
vlNxVsB+UtQ78huEBa3a9YvR5VaLDD5OMf61V8fZ8NbhH9t9QVXVU5G1GMg6f45crP94tKglFfVmLmRM
2xVXCzmZrJQpjsf4PdrtZgLubPvLYV1OTeK2BfVUx01A3+TLBu2EC1+q1GGVliWgZJ16y4vy00U369lT
Jfipy9zZLy+3qcc6LaLaTaDLAdhuJm9w/R9cHyCr2dtaPxNXs5Vq8Wgnw87uPM0JthuwKbUgEZkBq2CP
0DlLsBeqLtsxvx6/4dzM8YdRkejx9A47S21hlnLcA1nM8RI3HRjiFbR8xgemGvtt1f+KCTcWNdQ5cMEI
xkygbwDdWVtP/zMAAP//as4rTncSAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "views/index.html",
		size:    817,
		modtime: 1560121981,
		compressed: `
H4sIAAAAAAAC/4SS3WrDMAyF7/sUwrDLxNBr12MwCoMxxvYEaqwmAtcpjlLojN99JO3omv7dBX0nOkeS
U3K05kCgNshB5TwDADCOd1B57LqFqtogFETZkYy0mU9g0RA64K6oKAhFZZeE0keCpcca3rkTo5u5nZ1a
CK48/XXZ9pGKQ+X0WTRt5J82CPp/3oefB7tpLZ4XjkL7gRsyWprr9JPiEBnrO5qXSrgN3aXA6KnpoBmj
TbKtWrc/V6YEEUNNUMJx5w+nOQBnU4JymApyNlrcfeFX633bS/ktEYXqfXmaGHJOCbaRg4B6Ug/bXQUj
7P1tOAo8W4PQRFovlF57rJ/ZLYZ4b6+Qs7LkWIxGa7TnOz76ltH14Jf3SQkouOnGjZ4cyOjxBR7PaLTj
nZ2lRMHl/BsAAP//69LjNjEDAAA=
`,
	},

	"/layout.html": {
		name:    "layout.html",
		local:   "views/layout.html",
		size:    2004,
		modtime: 1563994978,
		compressed: `
H4sIAAAAAAAC/7yVXWvjOhCG7/srJurtUXTOXTnEhqVs2YUu7EfvSi9Ua+xMK0tGGieEkP++yHYS5wvK
tuyVZc3ofR+NNdZ6bbAkhyAaXaHYbK4AAGYT4wteNQhzrm3ez6UhWO2qTKAT20nUJr/qxt07E1vM71Bz
GxDurK7gF4YFFThTfWyUXCNrKOY6RORMtFzKm0F3H3a6xkwYjEWghsk7AYV3jI4z8eCrymL4H2694+At
rHwbYGv+Ey3qiBGWxHPgLjdOLhgsCJeNDzxSX5LheWYwwcvu5R8gR0zaylhoi9l/03/FeD+W3CsEtJmI
vLIY54gsYB6wzITSMSJH1bQBi9g/ZU1uWsQ4ZnqLRlpfesdSLzH6GgeNvchEykcqwTLC189w85T/GWMV
yEQZMDbeRVqg9NZIOos9eURnqHySMj/BqHigSBMfhXKOQcoDjg+rRwKweuVbjiqSQVmja4di/K1CnGV4
UwVmqm/SbvzszSq/GgKGFkAmE73u8QmCb+jaoW/ggFcPbNeJQXQSaXRP7lVAYXWM/YRMGxvx7ZS/6Pq5
DRUGoMK7A/EuJzba5TPVPfa2So8Jt/Adw9H6FBs4+j47zRk2cpwlU63IVdvyX4t8+Msc2u8kWnuqYSny
GbvhW5/mE2Mt8l1ZlTgnmSqZ/qcxgcyUpXcYNGQ9q5KcuWj1PaXA7cP9B9iVVleqCKgZL/rdduH3m11f
Lt6nH5flZ6q1R4dIGVqMT1/3eub8aXJHH3u9ZqwbqxmhD8N0uFiPlQ7G/RUHMRT7tn+JqqXpSxSpHbr4
bmXfykOHd9f0eo3ObDa/AwAA//9Ax1381AcAAA==
`,
	},

	"/login.html": {
		name:    "login.html",
		local:   "views/login.html",
		size:    360,
		modtime: 1560121981,
		compressed: `
H4sIAAAAAAAC/2SQUY7yMAyE33sKy+80F2h6if+/QGgMWJvYUeKyQlXvvmrLSrC8JfONRx4vS6QLCwHm
wILr2gEADJHvMKXQmsdJxUgMx53s9KI1/+IyVzptAkKYjFU8uqRXFoRMdtPosWh7HT8imFJsZO/yjljK
bCAhk0fTLxIEexTyWEJr31ojQklhopumSNXj/83T9z2O3WfYeTZTeQa0+ZzZ8G31p+HlfSqVc6gPHP/x
VYBlcAf4U8F9dhjcdonjP7jI97FbFpK4rj8BAAD///JUCoxoAQAA
`,
	},

	"/pilot/edit.html": {
		name:    "edit.html",
		local:   "views/pilot/edit.html",
		size:    1777,
		modtime: 1563994875,
		compressed: `
H4sIAAAAAAAC/7RVy27bOhDd+ysGxF0FUIibZSF509hFNkWAdl+MxZFElCJVcmSnIPTvhR4RpLS2Ubfl
ivaMzpwzL8Yo7+DD7jPIRhvHkpRmuJNdt4lRUaEtgahRW9F1GwCAVOkj5AZDyETuLJNlsR0sg7V6eGNM
KkIFOiQ5WSYvts99GHjvLHtn4BktmXcQI9wPht0Lk7donh6h61JZPWw3M3iM4NGWBPd7Qm497Q2WASZi
M4UFwab1lJQLfrNT4XwNmLN2NhOT9MJgKQNx4p0xrmUBNXHlVCYaF1j8BDKeZagBdb4laHRpSQlQyJgc
NJ/QK7LJCTmvtC0z8b9Y6FsT1GRUIN6eCQuQatu0DPy9oUxUWimyAizWlIkvI3EBRzQtTfxvQhoyc08v
/PQ4o8UI//2iWn8SoE/9OsKyxq/w5/Hf1jwf2yspvWubC8SGjw0eyEDhfCbI9rWvh6bezXf4xMhtSOXg
eQUtkKGcQasV2jqdiygXwQZA1/Rd+pqaU6WZjA7c91WMoAugb9Pw9DQJ1i5dNxIiFSNZ1XXXI/ZnFE/q
Oj058vttIQeD+dfLQlYuNwrZO58TPFI/60fkf6motePCPKtn4XCjmo+OITSU60L/NSWpHKlcmK/B7dAy
OzsNcWgPtWaxGrrRQWwDHimV468LO0EqfTy3/eT59ZfKfreu/5+wFg8FWdU/DJuFdUr0jwAAAP//+g4/
tfEGAAA=
`,
	},

	"/pilot/find.html": {
		name:    "find.html",
		local:   "views/pilot/find.html",
		size:    460,
		modtime: 1563994919,
		compressed: `
H4sIAAAAAAAC/2yQz27CMAzG7zyF5SNSG+3ecgJNSDtw2Au4jQFLqROlLn9U9d0nCpsY283JL/l++TKO
bgnvm09wSUI0txf1sHTTtBhHz3tRBuxIFKdpAQBQeTlBG6jva2yjGqvhaiYz3cfcAbUmUWt8ikTo2I7R
15hib/idkIbMxXznZyooyEHZI3gyKhqxM2XPWpzJ2qPooca3J+PdKhx8z/Z7e0aiaTCwa+IajS+GoNRx
jfPTSr7Ydo2QArV8jMFzrnF3I7AbmiAtbC7GWSnAdl2WJf4jaAazqA9DPzSdvNR7HHiai5Slo3zF1Uck
D7Owcnf20sz9rVa52zfd15XzclotxpHVT9NXAAAA//+9jaN8zAEAAA==
`,
	},

	"/flag": {
		name:  "flag",
		local: `views/flag`,
		isDir: true,
	},

	"/pilot": {
		name:  "pilot",
		local: `views/pilot`,
		isDir: true,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"views/flag": {
		_escData["/flag/create.html"],
		_escData["/flag/show.html"],
	},

	"views/pilot": {
		_escData["/pilot/edit.html"],
		_escData["/pilot/find.html"],
	},

	"./views": {
		_escData["/flag"],
		_escData["/index.html"],
		_escData["/layout.html"],
		_escData["/login.html"],
		_escData["/pilot"],
	},
}
