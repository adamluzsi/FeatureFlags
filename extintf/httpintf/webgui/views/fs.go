// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/flag/create.html": {
		name:    "create.html",
		local:   "views/flag/create.html",
		size:    2089,
		modtime: 1560121704,
		compressed: `
H4sIAAAAAAAC/8xVTWvcMBC951cMurQ92JvkvDaElkAhlJCQHzBrzdoCfSGN8sGy/73I9iaO2aRxKSV7
2dHOm/dGb7TSbidpqyyBMKis2O9PAADWUt1DozHGSjTOMlkWdZ/ps935LFl0hBJULBqyTEHUux2Uv9AQ
7PfrVXc+qZ0w+xSoaCfEc4AuNu6x0KGFHprGr+JsVtPXbV0wgA0rZyux2mpsBRjizslKeBdZvJLt0c9R
gVq1lqQAiYzFRvEDBkm2eEBuOmXbShzTHHQVaRmJ65Oj+aObzrYFp4s2uOTfIH4u1rghDVsXKrEl5BRI
1JdDANnj9apH/IFFWZ8YlHwhAYuGKpGdKnMo3iUYP/zkqRJMj/whuNfYUOe0pJfuISv24mVZvrP59Uqq
+//hqqeQzy22JOobp7VLDNfPvy21d8I2dTgMxGXkgEztUznBfdz4gDbzGmUrcSrA4GMlzk5PP8RwjzpR
LvsElkciKepbIgluC9wRBLTSGfCRknSHlbJDbvBu6SR6kdG4VzPI7Fn7FjUvMN8ms6HwF+c+n/dR+7Cz
3FtZlvDV+Xxjof72GcYiqVFROXvh1d3Nlah/jGu4uP4JdzdXSycw43v3/3DAXrlWNRdeLRhMCnr5VLhT
sb+KvkRoUmRn4NAC6NzDYdP/aEabxOzs2HFMG6NmT9IImMSFD8pgeBL190DIBJca2/VqSL6htV69PEhH
ci6Y2Xs79H1kOYa7HVm53/8OAAD//yxuFagpCAAA
`,
	},

	"/flag/show.html": {
		name:    "show.html",
		local:   "views/flag/show.html",
		size:    4168,
		modtime: 1560121920,
		compressed: `
H4sIAAAAAAAC/8RW3W6zOBC9z1OMfLO7nwT063VAqpRWilStqkZ9AAdPwFpjI9tUqRDvvjI/KaEESCLt
chOIx8fjM3NmpiwZHrhEIBnlklTVCgBgzfgnxIIaE5JYSYvSkqheqVfTx8GilyJlwI0Xo7SoSVSW4L8I
mvh/0wyhqtZB+tgD6MHnhUYv6aEPDYS3V0dP6ARq06L98X4P9tT7DkpnQGPLlQxJcBA0IZChTRULSa6M
JWfH1tanN48KnkhkI7gNNkfBDNpoNbo+ejHHj1bCS7Qq8gvAp82C7lHAQemQ5KgdlTRBEr0rIVRh4e30
3zqoTWfguMwLC5ydoU1uaR9JMwyJI8/Xzdm+sZpaTL78K6HsV44h0VQmSCDjMiQPBDJ6DMnvh4dFCJ9U
FBiSU0K1bPi7zqNvWqCqJiheB4x//hexM+hyaIfIQB3ApgiaSqYyyA0WTHVfXDZrzX2uDWl9yI3BdA44
93ZU2CuiKItsj/quoL33Tp6OlnvKMvi1NjmVP0TrZWgMTdDjUnCJJFoHzi76FbQF7H9NAIYxN1zJp5x/
vL+SaNN+w9PbFj7eX6+N9QDvXgl3cK8q4fFTzq9IgUKLRdZlCfxwSbCbs/PftlBVsyIf2UPKEiWbiHfv
yQWNMVWCoQ6JTbkBR80fBuLCWJVBRwkIh9/FCf5UueskVPx1T11pAtmLiHslLaMpZwwl+aGYtm9OnfsD
l7M51O1mBnNfWKtki2KKfcYHLbM16L17ueYZ1V8k+sgZtbgOmv8vULIOvvvoyJrS2WAUGNDbfg+XpieW
soS6B4H/xoWyBgZp08wN54PC2RQR5G7fz+lhdAaZnhP6lQKlU2eG0vouRrPh6Ye89shvEBb0AldIRo9b
LVJ+nGL8z14dZ81b6T+3fkFV1VuRtRjIOuFGztZ/PlrUkoramQsZ05bL1UJOJnUwxfEYv0e73UzAnbm/
HNbl1CTuC1JbaHyp7Sag7xJsMSfYS2IdCrUsASXrArhclzfrbnZqn1LhTY3+bDp3Tj3XmRHVBQW6NIDt
ZrK794fyb5DVbCfvJ+NqVqwWj9OD3Vk/bG6w3YBNqQWJyAxYBXuErrgEe6Fq5Y6V7PHudzfH37WKRM+n
d9hZaguzlOMeyGKOlxTUQU28gpZbSsFU576vAOzo5yX5j0m/L/vuhm0x/zcAAP//Nity4UgQAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "views/index.html",
		size:    817,
		modtime: 1560121673,
		compressed: `
H4sIAAAAAAAC/4SS3WrDMAyF7/sUwrDLxNBr12MwCoMxxvYEaqwmAtcpjlLojN99JO3omv7dBX0nOkeS
U3K05kCgNshB5TwDADCOd1B57LqFqtogFETZkYy0mU9g0RA64K6oKAhFZZeE0keCpcca3rkTo5u5nZ1a
CK48/XXZ9pGKQ+X0WTRt5J82CPp/3oefB7tpLZ4XjkL7gRsyWprr9JPiEBnrO5qXSrgN3aXA6KnpoBmj
TbKtWrc/V6YEEUNNUMJx5w+nOQBnU4JymApyNlrcfeFX633bS/ktEYXqfXmaGHJOCbaRg4B6Ug/bXQUj
7P1tOAo8W4PQRFovlF57rJ/ZLYZ4b6+Qs7LkWIxGa7TnOz76ltH14Jf3SQkouOnGjZ4cyOjxBR7PaLTj
nZ2lRMHl/BsAAP//69LjNjEDAAA=
`,
	},

	"/layout.html": {
		name:    "layout.html",
		local:   "views/layout.html",
		size:    1875,
		modtime: 1560121704,
		compressed: `
H4sIAAAAAAAC/7yVzW7bOBDH73mKMXNdWru3HCwBi6BGC7SHNscgB0Ycy5NQpMAZ2TAMv3tBSXbkLyBo
gp40mo///Dgixe3W4oI8gmpMhWq3uwEAmE1sKGXTICyldkXvSyY446tcoVd7Jxpb3HR29y4kDos5Gmkj
wtyZCh4wrqjEWdbHRsk1ioFyaSKj5KqVhb4bdN/C3tSYK4tcRmqEgldQBi/oJVf3wUsMDjahjbDv+Qsd
GkaGNckSFs5UPIH5/GFyRXpFuG5ClJHumqwsc4sJW3cv/wB5EjJOc2kc5v9N/1XjlTjyrxDR5Ypl45CX
iKJgGXGRq8wwo3DWtBFL7p+6Jj8tmcdM79FI9YvgRZs1cqhx0HgTmWj9SAtwgvDtC9w9FX/GWEWyrCNy
EzzTCnVwVtNF7MkjekuLJ62LM4xKBork+CyUSwxaH3F82jwSgDOb0ApnTBZ1jb4dhvG3BnGR4V0TmGX9
8ezs52A3xc0QsLQCsrnqdU93EPxA34KEqnIIR7xmYLtNDKqTSNZ38q8KSmeYe4dOCxvxHZS/mvq5jRVG
oDL4I/Euhxvji1nWPd7aZmZMuIfvGE7qU2zg6M/Zec6wkNMsnWZFvtqP/1YV8/nDcetDeevO6x2xXGg1
fOfzfBKsVXEYaaYuSaYppr8oJ5BZ5ugDDdK/MCsjGsGrve678Meb3V5fzf8/r8vPstadfNHM0mq8FbrX
C5vBkD+Z/nYrWDfOCEIfhulwv50qHdn9TQMcy1y9cNbS9IVV2pOd/1DRn6fhmHW35HaL3u52vwMAAP//
BbzUglMHAAA=
`,
	},

	"/login.html": {
		name:    "login.html",
		local:   "views/login.html",
		size:    360,
		modtime: 1560121673,
		compressed: `
H4sIAAAAAAAC/2SQUY7yMAyE33sKy+80F2h6if+/QGgMWJvYUeKyQlXvvmrLSrC8JfONRx4vS6QLCwHm
wILr2gEADJHvMKXQmsdJxUgMx53s9KI1/+IyVzptAkKYjFU8uqRXFoRMdtPosWh7HT8imFJsZO/yjljK
bCAhk0fTLxIEexTyWEJr31ojQklhopumSNXj/83T9z2O3WfYeTZTeQa0+ZzZ8G31p+HlfSqVc6gPHP/x
VYBlcAf4U8F9dhjcdonjP7jI97FbFpK4rj8BAAD///JUCoxoAQAA
`,
	},

	"/flag": {
		name:  "flag",
		local: `views/flag`,
		isDir: true,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"views/flag": {
		_escData["/flag/create.html"],
		_escData["/flag/show.html"],
	},

	"./views": {
		_escData["/flag"],
		_escData["/index.html"],
		_escData["/layout.html"],
		_escData["/login.html"],
	},
}
