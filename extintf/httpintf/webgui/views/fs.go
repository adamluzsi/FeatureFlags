// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/flag/create.html": {
		name:    "create.html",
		local:   "views/flag/create.html",
		size:    2159,
		modtime: 1562848409,
		compressed: `
H4sIAAAAAAAC/8xVT2vbThC951MMc/n9epDk5CwJQkugEEpIybmMtWNpYbW77J/8wfi7l5XkRBV2apdS
4otnNbPvvXmz0m63gjdSM2BPUuNudwEAUAr5CI0i7ytsjA6sA9ZDZsh2V4tk1jEJkD5rWAd2WG+3kH+j
nmG3K4vuarZ3hmyj46ydAS8LVLY2z5lyLQylcfrLLhd7hn0b43qgJkijKyw2ilqEnkNnRIXW+IC/0A7V
r1FGSraaBYKgQNlahidygnX2RKHppG4rPMQ58kpWwnM4nB5KpLYxgKaeK/wxakIIL5Yr7KQQrBEeSUWe
hNYXx6GW9qUBOKOy1plo8biGYbOiNSvYGFfhhilEx1jfjAGkaZXFUPEblLEbKd5AptaS53kK8V2A6Tf2
H/g5nFRuFTXcGSX4TT0kxoE8z/N3mi8LIR//hauWXXoDqGWs741SJga4e312rr0ztLnDbgTOfXAUuH3J
Z3WnG+9IJ9xe6gpXCD09V3i5Wp2EMB3W1Uew3DMLrL8zCzAbCB2DIy1MD9ZzFGa/knrMjd6dO4mB5NAM
EnriPsN4Hfs1uz848+msT7z7rpKuPM/hf2PTd4/Up48wEsGN9NLoaysf7m+x/jKt4fruKzzc357r/gLv
3XdhX3trWtlcW3nGYKJT508ldNIPn6H/PDTRB9PDXgKopGHf9F+a0TqGYPSk2Md1LxcX21QwizPrZE/u
BevPjikw3Chqy2JMHuEqi+PXWlmkK3Nxa4+6DyyncLtlLXa7nwEAAP//kRpWMG8IAAA=
`,
	},

	"/flag/show.html": {
		name:    "show.html",
		local:   "views/flag/show.html",
		size:    4727,
		modtime: 1561470675,
		compressed: `
H4sIAAAAAAAC/9RXX2+juhN9z6cY+aW7KwHdfQ78VCmtFKn6qWq0z1cOnoC1xka2qVIhvvuV+ZMSlgBp
ru4fXgr1+Ng+Z+aMU5YMD1wikIxySapqBQCwZvwNYkGNCUmspEVpSVSP1KPpj8GglyJlwI0Xo7SoSVSW
4D8Jmvj/pxlCVa2D9EcPoAefFxq9pIc+DBDeXh09oROoQ4v2j/d9MKeed1A6AxpbrmRIgoOgCYEMbapY
SHJlLDlbto4+vXlU8EQiG8FtsDkKZtCOD9chXOaFBUkzDMkfzboE7HuOIUk5YygJvFFRoFvfMXoZaciQ
I1or4SVaFTm5vIV6sqB7FHBQOiQ5aqcJTZBEr0oIVVh4Of1vHdShM3DNqTg7Q5uc0j4NEU4FXzdr+8Zq
ajF596+EakjUVCZIIOMyJPcEMnoMyff7+0UILfGnzGzZ8Hfdjj5ogaqaoHgdMP72d2hn0CXjDpGBOoBN
ETSVTGWQGyyY6r64bMaa81wrab3IJ8V0G9gtnd8oKItsj/omwV7bVadVck9ZBt/WJqfyt6r3MjSGJuhx
KbhEEq0DFxd9C1oH/EeFZxhzw5V8yPnP12cSbdpveHjZws/X52s1HuDdWrod3LNKePyQ8yvkL7RYFF2W
wA+XCnVztv7LFqpqtrhH5pCyRMkm9O49uaAxpkow1CGxKTfgqLkzEBfGqgw6SkA4/E4n+KJy14qo+HqL
n/S7Sq2Ie73QV4aNl0RX4HI2h7rdzGDuC2uVbFFMsc/4oOe2Ab13L9c8o/qdRDv6huDWgReNB9QoYzTr
oAm7wNA6uNyX14Gr9f/yNYGhQIv/ChGVjAWPf4VEoy20hFjJA9fZl7sHjfCuCjCFxv/dfR2T21mYOwg8
IbWFbkT+EPav0HVYRe33cGj6ZluWUF8xwH/hQlkDA3doEuc8U87SKMjdvN/TZ/Suejrfaq4hoHQmnKG0
vlNxVsB+UtQ78huEBa3a9YvR5VaLDD5OMf61V8fZ8NbhH9t9QVXVU5G1GMg6f45crP94tKglFfVmLmRM
2xVXCzmZrJQpjsf4PdrtZgLubPvLYV1OTeK2BfVUx01A3+TLBu2EC1+q1GGVliWgZJ16y4vy00U369lT
Jfipy9zZLy+3qcc6LaLaTaDLAdhuJm9w/R9cHyCr2dtaPxNXs5Vq8Wgnw87uPM0JthuwKbUgEZkBq2CP
0DlLsBeqLtsxvx6/4dzM8YdRkejx9A47S21hlnLcA1nM8RI3HRjiFbR8xgemGvtt1f+KCTcWNdQ5cMEI
xkygbwDdWVtP/zMAAP//as4rTncSAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "views/index.html",
		size:    817,
		modtime: 1560121981,
		compressed: `
H4sIAAAAAAAC/4SS3WrDMAyF7/sUwrDLxNBr12MwCoMxxvYEaqwmAtcpjlLojN99JO3omv7dBX0nOkeS
U3K05kCgNshB5TwDADCOd1B57LqFqtogFETZkYy0mU9g0RA64K6oKAhFZZeE0keCpcca3rkTo5u5nZ1a
CK48/XXZ9pGKQ+X0WTRt5J82CPp/3oefB7tpLZ4XjkL7gRsyWprr9JPiEBnrO5qXSrgN3aXA6KnpoBmj
TbKtWrc/V6YEEUNNUMJx5w+nOQBnU4JymApyNlrcfeFX633bS/ktEYXqfXmaGHJOCbaRg4B6Ug/bXQUj
7P1tOAo8W4PQRFovlF57rJ/ZLYZ4b6+Qs7LkWIxGa7TnOz76ltH14Jf3SQkouOnGjZ4cyOjxBR7PaLTj
nZ2lRMHl/BsAAP//69LjNjEDAAA=
`,
	},

	"/layout.html": {
		name:    "layout.html",
		local:   "views/layout.html",
		size:    1885,
		modtime: 1561469597,
		compressed: `
H4sIAAAAAAAC/7yVTW/bPAzH7/0UjHp9FD+7FUNsYChWbMB22Mut6EG1GIetLBkinSAI8t0H2U7qvAHF
WuxkmqT+/IkWrc3G4pw8gmpMhWq7vQIAmE1sKGXdICykdkXvSyY446tcoVc7JxpbXHV29y4kDos7NNJG
hDtnKviFcUklzrI+NkquUQyUCxMZJVetzPXNoPsS9qbGXFnkMlIjFLyCMnhBL7n6HarKYfwIt8FLDA7W
oY2wK/4THRpGhhXJAqTL5cmFAkvCVROijNRXZGWRW0zwunv5D8iTkHGaS+Mw/zD9X43348g/Q0SXK5a1
Q14gioJFxHmuMsOMwlnTRiy5f+qa/LRkHjO9RiOtnwcv2qyQQ42DxovIROt7moMThK+f4eah+DvGKpJl
HZGb4JmWqIOzms5iT+7RW5o/aF2cYFQyUCTHe6GcY9D6gOPd+pEAnFmHVjhjsqhr9O3QjH/ViLMMr+rA
LOuHtLMfg10XV0PA0hLI5qrXPT5B8B19O8wNHPCage06MahOIlnfyD8rKJ1h7h06bWzEt1f+YurHNlYY
gcrgD8S7HG6ML2ZZ93gpm5kx4Q6+Yzhan2IDRz9npznDRo6zdOoV+WrX/mtVDH+Zw/J7idadajhiOVNu
+Nan+SRYq2Lf1kydk0ydTP9TTiCzzNEbCsydqbIyohG8WOu2C7+92PXl3Xz6cVl+lrXu6Ktmlpbj49C9
njkQhvxR9zcbwbpxRhD6MEyHm+5Y6cDu7xzgWObqibOWpk+s0rns/PsV/UwNo9bdl5sNervd/gkAAP//
0tiw110HAAA=
`,
	},

	"/login.html": {
		name:    "login.html",
		local:   "views/login.html",
		size:    360,
		modtime: 1560121981,
		compressed: `
H4sIAAAAAAAC/2SQUY7yMAyE33sKy+80F2h6if+/QGgMWJvYUeKyQlXvvmrLSrC8JfONRx4vS6QLCwHm
wILr2gEADJHvMKXQmsdJxUgMx53s9KI1/+IyVzptAkKYjFU8uqRXFoRMdtPosWh7HT8imFJsZO/yjljK
bCAhk0fTLxIEexTyWEJr31ojQklhopumSNXj/83T9z2O3WfYeTZTeQa0+ZzZ8G31p+HlfSqVc6gPHP/x
VYBlcAf4U8F9dhjcdonjP7jI97FbFpK4rj8BAAD///JUCoxoAQAA
`,
	},

	"/flag": {
		name:  "flag",
		local: `views/flag`,
		isDir: true,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"views/flag": {
		_escData["/flag/create.html"],
		_escData["/flag/show.html"],
	},

	"./views": {
		_escData["/flag"],
		_escData["/index.html"],
		_escData["/layout.html"],
		_escData["/login.html"],
	},
}
