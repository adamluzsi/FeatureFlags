// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/create.html": {
		name:    "create.html",
		local:   "views/create.html",
		size:    2091,
		modtime: 1559804833,
		compressed: `
H4sIAAAAAAAC/8xVTWvcMBC951cMurQ92JvkvDaElkAhlJCQHzBrzdoCfSGN8sGy/73I9iaO2aRxKSV7
2dHOm/dGb7TSbidpqyyBMKis2O9PAADWUt1DozHGSjTOMlkWdZ/ps935LFl0hBJULBqyTEHUux2Uv9AQ
7PfrVXc+qZ0w+xSoaCfEc4AuNu6x0KGFHprGr+JsVtPXbV0wgA0rZyuxagIhkwBD3DlZCe8ii1fCPf45
KlCr1pIUIJGx2Ch+wCDJFg/ITadsW4ljqoOyIi0jcX1yNH9029m44HTRBpf8G8TPxRo3pGHrQiW2hJwC
ifpyCCC7vF71iD+wKOsTg5IvJGDRUCW2Gtsyh+JdgvHDT54qwfTIH4J7jQ11Tkt66R6yYi9eluU7m1+v
pLr/H656CvnkYkuivnFau8Rw/fzbUnsnbFOHw0BcRg7I1D6VE9zHjQ9oM69RthKnAgw+VuLs9PRDDPeo
E+WyT2B5JJKiviWS4LbAHUFAK50BHylJd1gpO+QG75ZOohcZjXs1g8yetW9R8wLzbTIbCn9x7vN5H7UP
O8u9lWUJX53Pdxbqb59hLJIaFZWzF17d3VyJ+se4hovrn3B3c7V0AjO+d/8PB+yVa1Vz4dWCwaSgl0+F
OxX7q+hLhCZFdgYOLYDOPRw2/Y9mtEnMzo4dx7QxavYkjYBJXPigDIYnUX/vHzS41NiuV0PyDa316uVB
OpJzwcxe3KHvI8sx3O3Iyv3+dwAAAP//emMeZisIAAA=
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "views/index.html",
		size:    2409,
		modtime: 1559805074,
		compressed: `
H4sIAAAAAAAC/8xWzWrrPBDd9ymG2XzfLThuu7YNhW4K5VJS+gCKNbYHZMlIcn8wfveLbCd10jRJf7hc
baKfo3OUMyONu05SwZoAa8Ea+/4MAKDrwApdEixgmgktkfwEuRLOpZgb7Ul7zDarA6K62gFEFQkJ7KKc
tCeLWdfB4reoCfo+iaurnf0zhaa1FJU7ArsgFa3MS6RsCQO8nX6iyz37hr2FsTWI3LPRKcZtI4Un3JIc
EJteJBSXmiSCFF5EK/bPwkrS0bPwecW6TPEjrVGPSUlHPjv7ELP3jwf7rFFRaU3bHBDYECixIgWFsSk2
ZIPboiTMlkYp03q438wl8QA9gZJ103pgucV4dNvUtKgpxUKJcmHHMyyct8JT+br4Ap1/bSjFISkRatYp
XiDU4iXFy4uLk1mehGopxZCDkzGLh/Wh3hzq+yOGJ7Hkp78ZUUckMXsgkmAK8BWF6ylNDY2jVpr1iPW4
Nv61rwR6EPpGiMNBwjEfhPKfjK1u6xXZ74RyOROHo0Ec37n4PHGN0O9egKgm50RJEWvFmjBL4oDLzuPZ
g/hP5IaknB0bfd3w4/IOs5tpDNf3t/C4vPtKGuxw/sSdX1PemZLz64Y/mR2tVSfv6DrgYs8Nv9k6wv0t
9P2hB2EPHLuOtDySAbPWKJFTZZQkm6Kv2EEw5z8Heeu8qWFtCqigsY4Y/G+aUKCE+vUTD9EY1llsQhcn
XyuWkjTOr9NUnY9Jv6NleYD09uYEylXrvdETiWtXNfvt2jwBZv2osVwL+4rZ41DLk3icP2BKEr8V5Q/W
ja33fHeMZh+Ymg27DkjL8PU0pcyfAAAA///TfDYnaQkAAA==
`,
	},

	"/layout.html": {
		name:    "layout.html",
		local:   "views/layout.html",
		size:    1870,
		modtime: 1559804403,
		compressed: `
H4sIAAAAAAAC/7yVzW7bOBDH73mKMXNdWru3HCwBi6BGC7SHNscgB0Ycy5NQpMAZ2TAMv3tBSXbkLyBo
gp48nI///Dgize3W4oI8gmpMhWq3uwEAmE1sKGXTICyldkXvSyY446tcoVd7Jxpb3HR2txYSh8UcjbQR
Ye5MBQ8YV1TiLOtjo+QaxUC5NJFRctXKQt8Num9hb2rMlUUuIzVCwSsogxf0kqv74CUGB5vQRtj3/IUO
DSPDmmQJC2cqnsB8/jC5Ir0iXDchykh3TVaWucWErbvFP0CehIzTXBqH+X/Tf9V4J478K0R0uWLZOOQl
oihYRlzkKjPMKJw1bcSS+19dk5+WzGOm92ik+kXwos0aOdQ4aLyJTLR+pAU4Qfj2Be6eij9jrCJZ1hG5
CZ5phTo4q+ki9uQRvaXFk9bFGUYlA0VyfBbKJQatjzg+bR4JwJlNaIUzJou6Rt8Ow/hbg7jI8K4JzLL+
enb2c7Cb4mYIWFoB2Vz1uqcnCH6gb0FCVTmEI14zsN0mBtVJJOs7+VcFpTPMvUOnjY34DspfTf3cxgoj
UBn8kXiXw43xxSzrft7aZmZMuIfvGE7qU2zg6O/Zec6wkdMsnWZFvtqP/1YV8/nDcetDeevO6x2xXGg1
fOfzfBKsVXEYaaYuSaYppn9RTiCzzNEHGpQRjeDVNvdd+ON9bq9v5P+f1+VnWetOPmZmaTU+Bd3ywjkw
5E8Gv90K1o0zgtCHYTo8badKR3b/yADHMlcvnLU0fWGVjmPnP1T0V2m4Yd0Dud2it7vd7wAAAP//AcHd
0k4HAAA=
`,
	},

	"/login.html": {
		name:    "login.html",
		local:   "views/login.html",
		size:    299,
		modtime: 1559745144,
		compressed: `
H4sIAAAAAAAC/1SPQYrDMAxF9zmF0L7JBeJcYuYCbqy2YmzJ2ApDMb77kLYwyU58/SeeWgt0YyHA5Fmw
9wEAYL5pSbBGX6vDvBW67AGCX41VHE5R7ywIieyhwWHWari80DfOFEMl+49eMUveDMQncmj6Q4Jgz0wO
s6/1V0tAyNGv9NAYqDj83jvjOOIynA9dNzOVD1y3a2LDk+6ncJgvuXDy5YnLF98FWObpvThoT2fvedq/
XobWSELvfwEAAP//jOQDGCsBAAA=
`,
	},

	"/show.html": {
		name:    "show.html",
		local:   "views/show.html",
		size:    2196,
		modtime: 1559804833,
		compressed: `
H4sIAAAAAAAC/7RWzW7zNhC8+ym2PFeSfetBFFCgDVAgKIIYfQCaXEt0KZIhl/6B4XcvaMuJ4sSpky+f
L7LBmV3ODM1V/YtyknYeoaPeNJM6P0AaESNn1hWryMAI23KGloHSgTNDgWUgCtVMAADqHkmA7ESISJwl
Wha/sfFSR+QLfEp6zdm2SKKQrveC9MIgA+ksoSXONHJULb5iWtEjZ2uNG+8CjcAbrajjCtdaYnH88Sto
q0kLU0QpDPJZOT2XIk0GmzsUlALeGdHOMWRiXZ1WTiij7b8Q0HAWaWcwdojEoAu45KwSMSLFSsZYLV2y
SpB2tpQxsk+yhfcDra5OFtYLp3bNpFZ6fTa+DVoVWavQFsO5xSVgC8eHF0pp2xbbAXfEdrNmv4fyb9Ej
HA511c2aycvq0oUehMwaOKuSV4Ky78+Ay3bBbUbFnxHa+kSQTw9nhFtibyDD5xTj0oi2zF+v4tbCJORs
tPOrUG+ExM4ZhYGzPy1hgJ1LAYaUIfPLsnyjqlJ6/WNKg7At3iI1OGNcojJSEITtrvQYJFoS7U0OPA70
+Zn+8Ez/yJheW86mDHqx5Ww2nV7I+QYDUjBfkq9Q6qidvXetlr97fbUI7Pegl+848MerCg9/weFwtcb/
uflOrQ83hFZ90O7acZQpkuvhLB1M7ga53T+P99BhwO/Px6Z+geEzEQVh1RxRzYWhm1N5HJG+EMQF/Sd4
7yMm5SCLcz0MWiEiqvcc9A11OsJGG5PHzFK3+RqhDi/qvPyJYSEiKoho8HiVlnXlbwhzHFVMi14Tg9HN
XeXLeeCM+XWUQXuCGOTLRFnFao1WuVCtnhKGXbmKrKmrE7S5hbfpBBXHLX2eO5qEt3PzAHyNrqthAlan
d5D/AgAA///xBHc1lAgAAA==
`,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./views": {
		_escData["/create.html"],
		_escData["/index.html"],
		_escData["/layout.html"],
		_escData["/login.html"],
		_escData["/show.html"],
	},
}
