// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "views/index.html",
		size:    898,
		modtime: 1559261003,
		compressed: `
H4sIAAAAAAAC/6STQZbTMAyG9z2F8BrXlBWLOMu5ACfQ2Gqi4joeS0nb2/PSNBC6AObNSvbT90vyr+fm
UxyC3gpBr+fU7po5QEgo4k0e7EkMJMydN5QNRK7eJK1mBgljuwMAaM6kCKHHKqTejHq038w21asWS28j
T95c7Yg2DOeCyq+JDIQhK2X1hslT7OgPZcYzeTMxXcpQdQNfOGrvI00cyN4vn4EzK2OyEjCRP+y/rKWU
NVH7QqhjpZeE3Xeqs7BxS2ahEucfUCl5I3pLJD2RGugrHb1xKEIqLoi44zDmiMpD3gcR8041lvKQNW6x
sHkd4q3dNZGn1fiucrTzW5Ez1bXFM3CFeygYI+fOXh/cM5uwdmQPXyFQShvmzvWH1ReYjYFfzvSHTTUX
eXoMsRw/PtA6zV+arL0aCZWLgtTw28uTuIlyHKo7vY1Ub/uTmLZxC9r+S3PpUS3nMur7dJvd/59uXvcT
6R77dsuP+xkAAP//QBPYLIIDAAA=
`,
	},

	"/show.html": {
		name:    "show.html",
		local:   "views/show.html",
		size:    3115,
		modtime: 1559263001,
		compressed: `
H4sIAAAAAAAC/7SXz27jNhDG736KKY+LSkpuPYgCCrQLFFgUiwR9gDE5liahSC058h8EefdCsZw4jp0y
211fBEO/bzjfjDwa17/YYGQ3EHTSu2ZRTxcwDlPSyofiLilw6FutyCuwHLVyEtUEEtpmAQBQ9yQIpsOY
SLQaZVX8po5vdSJDQd9GXmu1LUYsTOgHFF46UmCCF/KiFZMm29IrpceetFozbYYQ5QjesJVOW1qzoeLp
y6/AnoXRFcmgI31dXh1CCYuj5jOhjJE+O2xvKU7Cutrf2VOO/T1Eclol2TlKHZEo6CKttKowJZJUmZSq
VRi9ReHgS5OS+qAah2GW1dW+hPUy2F2zqC2vD4VvI9ti8orsKR6OOAW28HQZ0Fr2bbGduSe2u24eHqD8
G3uCx8e66q6bxcvdVYg9oJk8aFWNg0WZ6v4MnB4Xw+Yo+DPBfhgFpqdHK6GtqDfI/Nm3ceWwLVf7LlxE
1+hG0uoo+Yvo4NBQF5ylqNWfXijCLowR5kbDpC/L8o2xyvL6/5mN6FvKcRuDc2GUMklEoXZXDhQNecE2
qwI3s/z2IP/6LH+vMD17ra4U9LjV6vrq6sTODyjAGN132bdkOHHwX0LL5veBLwaBhwfg1ZkK/PEqwte/
4PHxYoz/quaZWO8mRN6+c9ylx9GMSUIPB+vgptNgOu6fmy/QUaQf3x8/9kuKH2lRRG9viewtOsnuys2R
6DsacSL/CbUfEo02wGQu9DB7hURkz1VwaKTjBBt2bnrTrLidxoh0dBLn5UcMS0xkIZGjp2la1tVwvpmL
136qT2cb1sCn6sTlW3Y5igSfx5qOzP0ybDPp4EJmEvtXRi4p3FPhgkGXp6EeORNdsctMpGNrKbNu3E8j
Ogvtg5cuDx0wpU2INo+OaDlkopRI8tBEGE1mvmlc9pwZV8jlgtvckNxn9mB6H2WBG6L7A7m4OD5n33C0
UFXTzjQP5eMBXScTeRBI0bwsenepWpO3IVZ330aKu/Iuqaau9miTo9t0KMVTSh/XHi2o+dppL31N19W8
mFb7vwb/BgAA///u3luqKwwAAA==
`,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./views": {
		_escData["/index.html"],
		_escData["/show.html"],
	},
}
