// Code generated by "esc -o ./views/fs.go -ignore fs.go -pkg views -prefix views ./views"; DO NOT EDIT.

package views

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/index.html": {
		name:    "index.html",
		local:   "views/index.html",
		size:    2916,
		modtime: 1559431724,
		compressed: `
H4sIAAAAAAAC/7RWTW/jNhC9+1dMeGkLlFaypz1IAoKmAQIERZAgp8UeaHEkDUKRAjmy4wr+74W+Etl1
snax1UUiZ/jezONwqLjkyqSLRVyi0ukCACBmYoPpLSpuPMKtUQU8oV9ThnE02BaDY4WsICuVD8iJaDiX
X0U6M1lVYSI0hsxTzeSsgMxZRsuJ+MNZ9s7A1jUeJq5HNKgCBtgQl5AbVYQLuL19ujgCuybc1M7zDHND
mstEYxeq7Ae/A1liUkaGTBlMrpaXYorekH0BjyYRgbcGQ4nIAkqPeSIiFQJyiOrGYxaGt6zILrMQ3gAu
pPxGORhGuPsTvn5Pz8ctPOkgPYba2UBrlM5oSXOqgekbWk35dynTPeqCR+Zu4mfQH/JKucd9OkOHnjvL
Um0wuAp/lnAdrlFb13CIKuVfkMkWo2r/p2JHeT+VKo6GI7WIV05vu7emNWRGhZCIzoR+Wjs3uAplhbaB
oeT2vmTpPP3tLCszm8zpFfUI1cOpCWy2EJUmW0xZiQ9OtxoDijSt08X4WrQteGULhCXsdv+KeDx98wDK
LwfGnh8oyAwtd3m3LSz/UhXCbhdH5ZfZ2hlyH34xAz50MHLlXqXxxaDGqFQjrw7W9Oty5ytQWdeGEhE1
tVaMYo+q93j7koFV9oJagFas5Ip4o7xGKzeKs5JskYhjPAMXodEBeSz4oz5GrdBA7nwi8mEz3nelkyaO
eo/0YwSydcNA+h1gbI1d41xOcx+uHx/e1pgIxlf+oetamQYTMds8cWKGNfpu61WBIn10xriG4eFt7pxU
Z0jzbP0AugzsFWOxXc78TlOgL3EBFdlEXAqo1Gsiri4vzxFlzGz5NAXxnuLpUgXsTvMTogaXA5fYHT7t
KqgDNtpNI7KDbaA8R8GeYEx6T7sOueN9UoZPFM021Qr9f9HocUZ2RiFpzCiQs9c1PT/ei/RmHMP1wx08
P96fI8QB1qflNPneu4Ky65pO1Kfx5oeebQuUHymemz3KhzvY7T6rtSPuom3R6rFnf/LURmVYOqPRJ4JL
Cv2v1y8Bsiawq2BKHkyHPUkNv7r+p06Z3z7dvXfB726muitJa7RiXhh3N0MZfIizapidHQFCs6qI9/v3
4CDS5763x9Ew/iC0OHpv0kdszlcH985wGR4Zjp9tC2h1d0Mu4mi48uOo/7v+JwAA//+RSyRMZAsAAA==
`,
	},

	"/show.html": {
		name:    "show.html",
		local:   "views/show.html",
		size:    3115,
		modtime: 1559263001,
		compressed: `
H4sIAAAAAAAC/7SXz27jNhDG736KKY+LSkpuPYgCCrQLFFgUiwR9gDE5liahSC058h8EefdCsZw4jp0y
211fBEO/bzjfjDwa17/YYGQ3EHTSu2ZRTxcwDlPSyofiLilw6FutyCuwHLVyEtUEEtpmAQBQ9yQIpsOY
SLQaZVX8po5vdSJDQd9GXmu1LUYsTOgHFF46UmCCF/KiFZMm29IrpceetFozbYYQ5QjesJVOW1qzoeLp
y6/AnoXRFcmgI31dXh1CCYuj5jOhjJE+O2xvKU7Cutrf2VOO/T1Eclol2TlKHZEo6CKttKowJZJUmZSq
VRi9ReHgS5OS+qAah2GW1dW+hPUy2F2zqC2vD4VvI9ti8orsKR6OOAW28HQZ0Fr2bbGduSe2u24eHqD8
G3uCx8e66q6bxcvdVYg9oJk8aFWNg0WZ6v4MnB4Xw+Yo+DPBfhgFpqdHK6GtqDfI/Nm3ceWwLVf7LlxE
1+hG0uoo+Yvo4NBQF5ylqNWfXijCLowR5kbDpC/L8o2xyvL6/5mN6FvKcRuDc2GUMklEoXZXDhQNecE2
qwI3s/z2IP/6LH+vMD17ra4U9LjV6vrq6sTODyjAGN132bdkOHHwX0LL5veBLwaBhwfg1ZkK/PEqwte/
4PHxYoz/quaZWO8mRN6+c9ylx9GMSUIPB+vgptNgOu6fmy/QUaQf3x8/9kuKH2lRRG9viewtOsnuys2R
6DsacSL/CbUfEo02wGQu9DB7hURkz1VwaKTjBBt2bnrTrLidxoh0dBLn5UcMS0xkIZGjp2la1tVwvpmL
136qT2cb1sCn6sTlW3Y5igSfx5qOzP0ybDPp4EJmEvtXRi4p3FPhgkGXp6EeORNdsctMpGNrKbNu3E8j
Ogvtg5cuDx0wpU2INo+OaDlkopRI8tBEGE1mvmlc9pwZV8jlgtvckNxn9mB6H2WBG6L7A7m4OD5n33C0
UFXTzjQP5eMBXScTeRBI0bwsenepWpO3IVZ330aKu/Iuqaau9miTo9t0KMVTSh/XHi2o+dppL31N19W8
mFb7vwb/BgAA///u3luqKwwAAA==
`,
	},

	"/x.html": {
		name:    "x.html",
		local:   "views/x.html",
		size:    6346,
		modtime: 1559429959,
		compressed: `
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
`,
	},

	"/views": {
		name:  "views",
		local: `./views`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"./views": {
		_escData["/index.html"],
		_escData["/show.html"],
		_escData["/x.html"],
	},
}
