// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../usecases/Storage.go

// Package cachespecs is a generated GoMock package.
package cachespecs

import (
	context "context"
	frameless "github.com/adamluzsi/frameless"
	rollouts "github.com/adamluzsi/toggler/services/rollouts"
	security "github.com/adamluzsi/toggler/services/security"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockStorage) Save(ctx context.Context, ptr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStorageMockRecorder) Save(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), ctx, ptr)
}

// FindByID mocks base method
func (m *MockStorage) FindByID(ctx context.Context, ptr interface{}, ID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, ptr, ID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockStorageMockRecorder) FindByID(ctx, ptr, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockStorage)(nil).FindByID), ctx, ptr, ID)
}

// Truncate mocks base method
func (m *MockStorage) Truncate(ctx context.Context, Type interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", ctx, Type)
	ret0, _ := ret[0].(error)
	return ret0
}

// Truncate indicates an expected call of Truncate
func (mr *MockStorageMockRecorder) Truncate(ctx, Type interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockStorage)(nil).Truncate), ctx, Type)
}

// DeleteByID mocks base method
func (m *MockStorage) DeleteByID(ctx context.Context, Type interface{}, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, Type, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID
func (mr *MockStorageMockRecorder) DeleteByID(ctx, Type, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockStorage)(nil).DeleteByID), ctx, Type, ID)
}

// Update mocks base method
func (m *MockStorage) Update(ctx context.Context, ptr interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, ptr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockStorageMockRecorder) Update(ctx, ptr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, ptr)
}

// FindAll mocks base method
func (m *MockStorage) FindAll(ctx context.Context, Type interface{}) frameless.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, Type)
	ret0, _ := ret[0].(frameless.Iterator)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockStorageMockRecorder) FindAll(ctx, Type interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockStorage)(nil).FindAll), ctx, Type)
}

// FindFlagByName mocks base method
func (m *MockStorage) FindFlagByName(ctx context.Context, name string) (*rollouts.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlagByName", ctx, name)
	ret0, _ := ret[0].(*rollouts.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlagByName indicates an expected call of FindFlagByName
func (mr *MockStorageMockRecorder) FindFlagByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlagByName", reflect.TypeOf((*MockStorage)(nil).FindFlagByName), ctx, name)
}

// FindFlagsByName mocks base method
func (m *MockStorage) FindFlagsByName(ctx context.Context, names ...string) rollouts.FlagEntries {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range names {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindFlagsByName", varargs...)
	ret0, _ := ret[0].(rollouts.FlagEntries)
	return ret0
}

// FindFlagsByName indicates an expected call of FindFlagsByName
func (mr *MockStorageMockRecorder) FindFlagsByName(ctx interface{}, names ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, names...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlagsByName", reflect.TypeOf((*MockStorage)(nil).FindFlagsByName), varargs...)
}

// FindFlagPilotByExternalPilotID mocks base method
func (m *MockStorage) FindFlagPilotByExternalPilotID(ctx context.Context, FeatureFlagID, ExternalPilotID string) (*rollouts.Pilot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFlagPilotByExternalPilotID", ctx, FeatureFlagID, ExternalPilotID)
	ret0, _ := ret[0].(*rollouts.Pilot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFlagPilotByExternalPilotID indicates an expected call of FindFlagPilotByExternalPilotID
func (mr *MockStorageMockRecorder) FindFlagPilotByExternalPilotID(ctx, FeatureFlagID, ExternalPilotID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFlagPilotByExternalPilotID", reflect.TypeOf((*MockStorage)(nil).FindFlagPilotByExternalPilotID), ctx, FeatureFlagID, ExternalPilotID)
}

// FindPilotsByFeatureFlag mocks base method
func (m *MockStorage) FindPilotsByFeatureFlag(ctx context.Context, ff *rollouts.FeatureFlag) frameless.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPilotsByFeatureFlag", ctx, ff)
	ret0, _ := ret[0].(frameless.Iterator)
	return ret0
}

// FindPilotsByFeatureFlag indicates an expected call of FindPilotsByFeatureFlag
func (mr *MockStorageMockRecorder) FindPilotsByFeatureFlag(ctx, ff interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPilotsByFeatureFlag", reflect.TypeOf((*MockStorage)(nil).FindPilotsByFeatureFlag), ctx, ff)
}

// FindPilotEntriesByExtID mocks base method
func (m *MockStorage) FindPilotEntriesByExtID(ctx context.Context, pilotExtID string) rollouts.PilotEntries {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPilotEntriesByExtID", ctx, pilotExtID)
	ret0, _ := ret[0].(rollouts.PilotEntries)
	return ret0
}

// FindPilotEntriesByExtID indicates an expected call of FindPilotEntriesByExtID
func (mr *MockStorageMockRecorder) FindPilotEntriesByExtID(ctx, pilotExtID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPilotEntriesByExtID", reflect.TypeOf((*MockStorage)(nil).FindPilotEntriesByExtID), ctx, pilotExtID)
}

// FindTokenBySHA512Hex mocks base method
func (m *MockStorage) FindTokenBySHA512Hex(ctx context.Context, sha512hex string) (*security.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTokenBySHA512Hex", ctx, sha512hex)
	ret0, _ := ret[0].(*security.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTokenBySHA512Hex indicates an expected call of FindTokenBySHA512Hex
func (mr *MockStorageMockRecorder) FindTokenBySHA512Hex(ctx, sha512hex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTokenBySHA512Hex", reflect.TypeOf((*MockStorage)(nil).FindTokenBySHA512Hex), ctx, sha512hex)
}

// Close mocks base method
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}
